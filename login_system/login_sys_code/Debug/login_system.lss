
login_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000255a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  0000255a  000025ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000da  008000da  00002668  2**0
                  ALLOC
  3 .stab         00001d10  00000000  00000000  00002668  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b30  00000000  00000000  00004378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005197  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000071dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000082dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009260  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000093e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000096a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009f30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3e       	cpi	r26, 0xE2	; 226
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 11 	call	0x228a	; 0x228a <main>
      8a:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 eb       	ldi	r26, 0xB2	; 178
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 eb       	ldi	r24, 0xB2	; 178
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 eb       	ldi	r22, 0xB2	; 178
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_INTI>:

/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

void DIO_INTI(void) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

  DDRA_REG = conc(DIO_PA7_inti_direction, DIO_PA6_inti_direction,
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	80 83       	st	Z, r24
                  DIO_PA5_inti_direction, DIO_PA4_inti_direction,
                  DIO_PA3_inti_direction, DIO_PA2_inti_direction,
                  DIO_PA1_inti_direction, DIO_PA0_inti_direction);

  DDRB_REG = conc(DIO_PB7_inti_direction, DIO_PB6_inti_direction,
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8b ef       	ldi	r24, 0xFB	; 251
     cb4:	80 83       	st	Z, r24
                  DIO_PB5_inti_direction, DIO_PB4_inti_direction,
                  DIO_PB3_inti_direction, DIO_PB2_inti_direction,
                  DIO_PB1_inti_direction, DIO_PB0_inti_direction);

  DDRC_REG = conc(DIO_PC7_inti_direction, DIO_PC6_inti_direction,
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	80 83       	st	Z, r24
                  DIO_PC5_inti_direction, DIO_PC4_inti_direction,
                  DIO_PC3_inti_direction, DIO_PC2_inti_direction,
                  DIO_PC1_inti_direction, DIO_PC0_inti_direction);

  DDRD_REG = conc(DIO_PD7_inti_direction, DIO_PD6_inti_direction,
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8f e0       	ldi	r24, 0x0F	; 15
     cc4:	80 83       	st	Z, r24
                  DIO_PD5_inti_direction, DIO_PD4_inti_direction,
                  DIO_PD3_inti_direction, DIO_PD2_inti_direction,
                  DIO_PD1_inti_direction, DIO_PD0_inti_direction);

  PORTA_REG = conc(DIO_PA7_inti_value, DIO_PA6_inti_value, DIO_PA5_inti_value,
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1
                   DIO_PA4_inti_value, DIO_PA3_inti_value, DIO_PA2_inti_value,
                   DIO_PA1_inti_value, DIO_PA0_inti_value);

  PORTB_REG = conc(DIO_PB7_inti_value, DIO_PB6_inti_value, DIO_PB5_inti_value,
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	84 e0       	ldi	r24, 0x04	; 4
     cd2:	80 83       	st	Z, r24
                   DIO_PB4_inti_value, DIO_PB3_inti_value, DIO_PB2_inti_value,
                   DIO_PB1_inti_value, DIO_PB0_inti_value);

  PORTC_REG = conc(DIO_PC7_inti_value, DIO_PC6_inti_value, DIO_PC5_inti_value,
     cd4:	e5 e3       	ldi	r30, 0x35	; 53
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	10 82       	st	Z, r1
                   DIO_PC4_inti_value, DIO_PC3_inti_value, DIO_PC2_inti_value,
                   DIO_PC1_inti_value, DIO_PC0_inti_value);

  PORTD_REG = conc(DIO_PD7_inti_value, DIO_PD6_inti_value, DIO_PD5_inti_value,
     cda:	e2 e3       	ldi	r30, 0x32	; 50
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	80 83       	st	Z, r24
                   DIO_PD4_inti_value, DIO_PD3_inti_value, DIO_PD2_inti_value,
                   DIO_PD1_inti_value, DIO_PD0_inti_value);
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <DIO_set_pin_direction>:
/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DIO_set_pin_direction(uint_8 port_id, uint_8 pin_id,
                             uint_8 pin_direction) {
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	00 d0       	rcall	.+0      	; 0xcee <DIO_set_pin_direction+0x6>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <DIO_set_pin_direction+0x8>
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <DIO_set_pin_direction+0xa>
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	8a 83       	std	Y+2, r24	; 0x02
     cf8:	6b 83       	std	Y+3, r22	; 0x03
     cfa:	4c 83       	std	Y+4, r20	; 0x04
  uint_8 Error_state = Return_Ok;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD) && (pin_id <= PIN7) &&
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	08 f0       	brcs	.+2      	; 0xd08 <DIO_set_pin_direction+0x20>
     d06:	dc c0       	rjmp	.+440    	; 0xec0 <DIO_set_pin_direction+0x1d8>
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	88 30       	cpi	r24, 0x08	; 8
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <DIO_set_pin_direction+0x28>
     d0e:	d8 c0       	rjmp	.+432    	; 0xec0 <DIO_set_pin_direction+0x1d8>
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	21 f0       	breq	.+8      	; 0xd1e <DIO_set_pin_direction+0x36>
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	88 23       	and	r24, r24
     d1a:	09 f0       	breq	.+2      	; 0xd1e <DIO_set_pin_direction+0x36>
     d1c:	d1 c0       	rjmp	.+418    	; 0xec0 <DIO_set_pin_direction+0x1d8>
      (pin_direction == Output || pin_direction == INput)) {

    switch (port_id) {
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	3e 83       	std	Y+6, r19	; 0x06
     d26:	2d 83       	std	Y+5, r18	; 0x05
     d28:	8d 81       	ldd	r24, Y+5	; 0x05
     d2a:	9e 81       	ldd	r25, Y+6	; 0x06
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	91 05       	cpc	r25, r1
     d30:	d1 f1       	breq	.+116    	; 0xda6 <DIO_set_pin_direction+0xbe>
     d32:	2d 81       	ldd	r18, Y+5	; 0x05
     d34:	3e 81       	ldd	r19, Y+6	; 0x06
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	09 f4       	brne	.+2      	; 0xd3e <DIO_set_pin_direction+0x56>
     d3c:	63 c0       	rjmp	.+198    	; 0xe04 <DIO_set_pin_direction+0x11c>
     d3e:	8d 81       	ldd	r24, Y+5	; 0x05
     d40:	9e 81       	ldd	r25, Y+6	; 0x06
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	09 f0       	breq	.+2      	; 0xd48 <DIO_set_pin_direction+0x60>
     d46:	8d c0       	rjmp	.+282    	; 0xe62 <DIO_set_pin_direction+0x17a>
    /***********  PORTA  *************/
    case (PORTA):
      switch (pin_direction) {
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	a1 f4       	brne	.+40     	; 0xd7c <DIO_set_pin_direction+0x94>
      case (Output):
        SET_BIT(DDRA_REG, pin_id);
     d54:	aa e3       	ldi	r26, 0x3A	; 58
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	ea e3       	ldi	r30, 0x3A	; 58
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <DIO_set_pin_direction+0x8a>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <DIO_set_pin_direction+0x86>
     d76:	84 2b       	or	r24, r20
     d78:	8c 93       	st	X, r24
     d7a:	a3 c0       	rjmp	.+326    	; 0xec2 <DIO_set_pin_direction+0x1da>
        break;

      default:
        CLR_BIT(DDRA_REG, pin_id);
     d7c:	aa e3       	ldi	r26, 0x3A	; 58
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	ea e3       	ldi	r30, 0x3A	; 58
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <DIO_set_pin_direction+0xb2>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <DIO_set_pin_direction+0xae>
     d9e:	80 95       	com	r24
     da0:	84 23       	and	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	8e c0       	rjmp	.+284    	; 0xec2 <DIO_set_pin_direction+0x1da>
      break;
    /********************************/

    /***********  PORTB *************/
    case (PORTB):
      switch (pin_direction) {
     da6:	8c 81       	ldd	r24, Y+4	; 0x04
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	91 05       	cpc	r25, r1
     db0:	a1 f4       	brne	.+40     	; 0xdda <DIO_set_pin_direction+0xf2>
      case (Output):
        SET_BIT(DDRB_REG, pin_id);
     db2:	a7 e3       	ldi	r26, 0x37	; 55
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e7 e3       	ldi	r30, 0x37	; 55
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_set_pin_direction+0xe8>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_set_pin_direction+0xe4>
     dd4:	84 2b       	or	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	74 c0       	rjmp	.+232    	; 0xec2 <DIO_set_pin_direction+0x1da>
        break;

      default:
        CLR_BIT(DDRB_REG, pin_id);
     dda:	a7 e3       	ldi	r26, 0x37	; 55
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e7 e3       	ldi	r30, 0x37	; 55
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_set_pin_direction+0x110>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_set_pin_direction+0x10c>
     dfc:	80 95       	com	r24
     dfe:	84 23       	and	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	5f c0       	rjmp	.+190    	; 0xec2 <DIO_set_pin_direction+0x1da>
      break;
    /********************************/

    /***********  PORTC  ************/
    case (PORTC):
      switch (pin_direction) {
     e04:	8c 81       	ldd	r24, Y+4	; 0x04
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	91 05       	cpc	r25, r1
     e0e:	a1 f4       	brne	.+40     	; 0xe38 <DIO_set_pin_direction+0x150>
      case (Output):
        SET_BIT(DDRC_REG, pin_id);
     e10:	a4 e3       	ldi	r26, 0x34	; 52
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e4 e3       	ldi	r30, 0x34	; 52
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_set_pin_direction+0x146>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_set_pin_direction+0x142>
     e32:	84 2b       	or	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	45 c0       	rjmp	.+138    	; 0xec2 <DIO_set_pin_direction+0x1da>
        break;

      default:
        CLR_BIT(DDRC_REG, pin_id);
     e38:	a4 e3       	ldi	r26, 0x34	; 52
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e4 e3       	ldi	r30, 0x34	; 52
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_set_pin_direction+0x16e>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_set_pin_direction+0x16a>
     e5a:	80 95       	com	r24
     e5c:	84 23       	and	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	30 c0       	rjmp	.+96     	; 0xec2 <DIO_set_pin_direction+0x1da>
      break;
      /********************************/

    default:

      switch (pin_direction) {
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	91 05       	cpc	r25, r1
     e6c:	a1 f4       	brne	.+40     	; 0xe96 <DIO_set_pin_direction+0x1ae>
      case (Output):
        SET_BIT(DDRD_REG, pin_id);
     e6e:	a1 e3       	ldi	r26, 0x31	; 49
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e1 e3       	ldi	r30, 0x31	; 49
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	48 2f       	mov	r20, r24
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 2e       	mov	r0, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <DIO_set_pin_direction+0x1a4>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0a 94       	dec	r0
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <DIO_set_pin_direction+0x1a0>
     e90:	84 2b       	or	r24, r20
     e92:	8c 93       	st	X, r24
     e94:	16 c0       	rjmp	.+44     	; 0xec2 <DIO_set_pin_direction+0x1da>
        break;

      default:
        CLR_BIT(DDRD_REG, pin_id);
     e96:	a1 e3       	ldi	r26, 0x31	; 49
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e1 e3       	ldi	r30, 0x31	; 49
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 2e       	mov	r0, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_set_pin_direction+0x1cc>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_set_pin_direction+0x1c8>
     eb8:	80 95       	com	r24
     eba:	84 23       	and	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <DIO_set_pin_direction+0x1da>
      }
      break;
    }

  } else {
    Error_state = Return_NOT_Ok;
     ec0:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec4:	26 96       	adiw	r28, 0x06	; 6
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DI_set_pin_value>:

/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DI_set_pin_value(uint_8 port_id, uint_8 pin_id, uint_8 pin_value) {
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <DI_set_pin_value+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <DI_set_pin_value+0x8>
     ede:	00 d0       	rcall	.+0      	; 0xee0 <DI_set_pin_value+0xa>
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	6b 83       	std	Y+3, r22	; 0x03
     ee8:	4c 83       	std	Y+4, r20	; 0x04

  uint_8 Error_state = Return_Ok;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD) &&
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	84 30       	cpi	r24, 0x04	; 4
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <DI_set_pin_value+0x20>
     ef4:	dc c0       	rjmp	.+440    	; 0x10ae <DI_set_pin_value+0x1d8>
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	88 30       	cpi	r24, 0x08	; 8
     efa:	08 f0       	brcs	.+2      	; 0xefe <DI_set_pin_value+0x28>
     efc:	d8 c0       	rjmp	.+432    	; 0x10ae <DI_set_pin_value+0x1d8>
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	88 23       	and	r24, r24
     f02:	21 f0       	breq	.+8      	; 0xf0c <DI_set_pin_value+0x36>
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	09 f0       	breq	.+2      	; 0xf0c <DI_set_pin_value+0x36>
     f0a:	d1 c0       	rjmp	.+418    	; 0x10ae <DI_set_pin_value+0x1d8>
      (pin_id <= PIN7 && (pin_value == Pin_low || pin_value == Pin_high))) {

    switch (port_id) {
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3e 83       	std	Y+6, r19	; 0x06
     f14:	2d 83       	std	Y+5, r18	; 0x05
     f16:	8d 81       	ldd	r24, Y+5	; 0x05
     f18:	9e 81       	ldd	r25, Y+6	; 0x06
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	91 05       	cpc	r25, r1
     f1e:	d1 f1       	breq	.+116    	; 0xf94 <DI_set_pin_value+0xbe>
     f20:	2d 81       	ldd	r18, Y+5	; 0x05
     f22:	3e 81       	ldd	r19, Y+6	; 0x06
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	09 f4       	brne	.+2      	; 0xf2c <DI_set_pin_value+0x56>
     f2a:	63 c0       	rjmp	.+198    	; 0xff2 <DI_set_pin_value+0x11c>
     f2c:	8d 81       	ldd	r24, Y+5	; 0x05
     f2e:	9e 81       	ldd	r25, Y+6	; 0x06
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	09 f0       	breq	.+2      	; 0xf36 <DI_set_pin_value+0x60>
     f34:	8d c0       	rjmp	.+282    	; 0x1050 <DI_set_pin_value+0x17a>
    /********************  Port A  ****************************/
    case (PORTA):

      switch (pin_value) {
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	91 05       	cpc	r25, r1
     f40:	a1 f4       	brne	.+40     	; 0xf6a <DI_set_pin_value+0x94>
      case (Pin_high):
        SET_BIT(PORTA_REG, pin_id);
     f42:	ab e3       	ldi	r26, 0x3B	; 59
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	eb e3       	ldi	r30, 0x3B	; 59
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DI_set_pin_value+0x8a>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DI_set_pin_value+0x86>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	a3 c0       	rjmp	.+326    	; 0x10b0 <DI_set_pin_value+0x1da>
        break;

      default:
        CLR_BIT(PORTA_REG, pin_id);
     f6a:	ab e3       	ldi	r26, 0x3B	; 59
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	eb e3       	ldi	r30, 0x3B	; 59
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DI_set_pin_value+0xb2>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DI_set_pin_value+0xae>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	8e c0       	rjmp	.+284    	; 0x10b0 <DI_set_pin_value+0x1da>
    /***********************************************************/

    /********************  Port B  ****************************/
    case (PORTB):

      switch (pin_value) {
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	91 05       	cpc	r25, r1
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <DI_set_pin_value+0xf2>
      case (Pin_high):
        SET_BIT(PORTB_REG, pin_id);
     fa0:	a8 e3       	ldi	r26, 0x38	; 56
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e8 e3       	ldi	r30, 0x38	; 56
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DI_set_pin_value+0xe8>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DI_set_pin_value+0xe4>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	74 c0       	rjmp	.+232    	; 0x10b0 <DI_set_pin_value+0x1da>
        break;

      default:
        CLR_BIT(PORTB_REG, pin_id);
     fc8:	a8 e3       	ldi	r26, 0x38	; 56
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e8 e3       	ldi	r30, 0x38	; 56
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DI_set_pin_value+0x110>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DI_set_pin_value+0x10c>
     fea:	80 95       	com	r24
     fec:	84 23       	and	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	5f c0       	rjmp	.+190    	; 0x10b0 <DI_set_pin_value+0x1da>
    /***********************************************************/

    /********************  Port C ****************************/
    case (PORTC):

      switch (pin_value) {
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	a1 f4       	brne	.+40     	; 0x1026 <DI_set_pin_value+0x150>
      case (Pin_high):
        SET_BIT(PORTC_REG, pin_id);
     ffe:	a5 e3       	ldi	r26, 0x35	; 53
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e5 e3       	ldi	r30, 0x35	; 53
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DI_set_pin_value+0x146>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DI_set_pin_value+0x142>
    1020:	84 2b       	or	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	45 c0       	rjmp	.+138    	; 0x10b0 <DI_set_pin_value+0x1da>
        break;

      default:
        CLR_BIT(PORTC_REG, pin_id);
    1026:	a5 e3       	ldi	r26, 0x35	; 53
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e5 e3       	ldi	r30, 0x35	; 53
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DI_set_pin_value+0x16e>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DI_set_pin_value+0x16a>
    1048:	80 95       	com	r24
    104a:	84 23       	and	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	30 c0       	rjmp	.+96     	; 0x10b0 <DI_set_pin_value+0x1da>
      /***********************************************************/

      /********************  Port D ****************************/

    default:
      switch (pin_value) {
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	88 2f       	mov	r24, r24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	91 05       	cpc	r25, r1
    105a:	a1 f4       	brne	.+40     	; 0x1084 <DI_set_pin_value+0x1ae>
      case (Pin_high):
        SET_BIT(PORTD_REG, pin_id);
    105c:	a2 e3       	ldi	r26, 0x32	; 50
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e2 e3       	ldi	r30, 0x32	; 50
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DI_set_pin_value+0x1a4>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DI_set_pin_value+0x1a0>
    107e:	84 2b       	or	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	16 c0       	rjmp	.+44     	; 0x10b0 <DI_set_pin_value+0x1da>
        break;

      default:
        CLR_BIT(PORTD_REG, pin_id);
    1084:	a2 e3       	ldi	r26, 0x32	; 50
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e2 e3       	ldi	r30, 0x32	; 50
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DI_set_pin_value+0x1cc>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DI_set_pin_value+0x1c8>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <DI_set_pin_value+0x1da>

    /***********************************************************/

  } else {

    Error_state = Return_NOT_Ok;
    10ae:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b2:	26 96       	adiw	r28, 0x06	; 6
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <DIO_get_pin_value>:
/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DIO_get_pin_value(uint_8 port_id, uint_8 pin_id,
                         uint_8 *return_pin_value) {
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	27 97       	sbiw	r28, 0x07	; 7
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	8a 83       	std	Y+2, r24	; 0x02
    10da:	6b 83       	std	Y+3, r22	; 0x03
    10dc:	5d 83       	std	Y+5, r21	; 0x05
    10de:	4c 83       	std	Y+4, r20	; 0x04

  uint_8 Error_state = Return_Ok;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD) && (pin_id <= PIN7) && (return_pin_value != NULL)) {
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <DIO_get_pin_value+0x28>
    10ea:	6e c0       	rjmp	.+220    	; 0x11c8 <DIO_get_pin_value+0x104>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	88 30       	cpi	r24, 0x08	; 8
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <DIO_get_pin_value+0x30>
    10f2:	6a c0       	rjmp	.+212    	; 0x11c8 <DIO_get_pin_value+0x104>
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	09 f4       	brne	.+2      	; 0x10fe <DIO_get_pin_value+0x3a>
    10fc:	65 c0       	rjmp	.+202    	; 0x11c8 <DIO_get_pin_value+0x104>

    switch (port_id) {
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	3f 83       	std	Y+7, r19	; 0x07
    1106:	2e 83       	std	Y+6, r18	; 0x06
    1108:	4e 81       	ldd	r20, Y+6	; 0x06
    110a:	5f 81       	ldd	r21, Y+7	; 0x07
    110c:	41 30       	cpi	r20, 0x01	; 1
    110e:	51 05       	cpc	r21, r1
    1110:	f9 f0       	breq	.+62     	; 0x1150 <DIO_get_pin_value+0x8c>
    1112:	8e 81       	ldd	r24, Y+6	; 0x06
    1114:	9f 81       	ldd	r25, Y+7	; 0x07
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	91 05       	cpc	r25, r1
    111a:	71 f1       	breq	.+92     	; 0x1178 <DIO_get_pin_value+0xb4>
    111c:	2e 81       	ldd	r18, Y+6	; 0x06
    111e:	3f 81       	ldd	r19, Y+7	; 0x07
    1120:	21 15       	cp	r18, r1
    1122:	31 05       	cpc	r19, r1
    1124:	09 f0       	breq	.+2      	; 0x1128 <DIO_get_pin_value+0x64>
    1126:	3c c0       	rjmp	.+120    	; 0x11a0 <DIO_get_pin_value+0xdc>
    case (PORTA):
      *return_pin_value = GET_BIT(PINA_REG, pin_id);
    1128:	e9 e3       	ldi	r30, 0x39	; 57
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_get_pin_value+0x7c>
    113c:	55 95       	asr	r21
    113e:	47 95       	ror	r20
    1140:	8a 95       	dec	r24
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_get_pin_value+0x78>
    1144:	ca 01       	movw	r24, r20
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	ec 81       	ldd	r30, Y+4	; 0x04
    114a:	fd 81       	ldd	r31, Y+5	; 0x05
    114c:	80 83       	st	Z, r24
    114e:	3d c0       	rjmp	.+122    	; 0x11ca <DIO_get_pin_value+0x106>
      break;
    case (PORTB):
      *return_pin_value = GET_BIT(PINB_REG, pin_id);
    1150:	e6 e3       	ldi	r30, 0x36	; 54
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a9 01       	movw	r20, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_get_pin_value+0xa4>
    1164:	55 95       	asr	r21
    1166:	47 95       	ror	r20
    1168:	8a 95       	dec	r24
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_get_pin_value+0xa0>
    116c:	ca 01       	movw	r24, r20
    116e:	81 70       	andi	r24, 0x01	; 1
    1170:	ec 81       	ldd	r30, Y+4	; 0x04
    1172:	fd 81       	ldd	r31, Y+5	; 0x05
    1174:	80 83       	st	Z, r24
    1176:	29 c0       	rjmp	.+82     	; 0x11ca <DIO_get_pin_value+0x106>
      break;
    case (PORTC):
      *return_pin_value = GET_BIT(PINC_REG, pin_id);
    1178:	e3 e3       	ldi	r30, 0x33	; 51
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_get_pin_value+0xcc>
    118c:	55 95       	asr	r21
    118e:	47 95       	ror	r20
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_get_pin_value+0xc8>
    1194:	ca 01       	movw	r24, r20
    1196:	81 70       	andi	r24, 0x01	; 1
    1198:	ec 81       	ldd	r30, Y+4	; 0x04
    119a:	fd 81       	ldd	r31, Y+5	; 0x05
    119c:	80 83       	st	Z, r24
    119e:	15 c0       	rjmp	.+42     	; 0x11ca <DIO_get_pin_value+0x106>
      break;
    default:
      *return_pin_value = GET_BIT(PIND_REG, pin_id);
    11a0:	e0 e3       	ldi	r30, 0x30	; 48
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_get_pin_value+0xf4>
    11b4:	55 95       	asr	r21
    11b6:	47 95       	ror	r20
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_get_pin_value+0xf0>
    11bc:	ca 01       	movw	r24, r20
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	ec 81       	ldd	r30, Y+4	; 0x04
    11c2:	fd 81       	ldd	r31, Y+5	; 0x05
    11c4:	80 83       	st	Z, r24
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <DIO_get_pin_value+0x106>
      break;
    }

  } else {

    Error_state = Return_NOT_Ok;
    11c8:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    11cc:	27 96       	adiw	r28, 0x07	; 7
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <DIO_set_port_direction>:

/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DIO_set_port_direction(uint_8 port_id, uint_8 pin_direction) {
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <DIO_set_port_direction+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <DIO_set_port_direction+0x8>
    11e6:	0f 92       	push	r0
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	8a 83       	std	Y+2, r24	; 0x02
    11ee:	6b 83       	std	Y+3, r22	; 0x03

  uint_8 Error_state = Return_Ok;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01

  if ((port_id <= PORTD) &&
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	84 30       	cpi	r24, 0x04	; 4
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <DIO_set_port_direction+0x1e>
    11fa:	56 c0       	rjmp	.+172    	; 0x12a8 <DIO_set_port_direction+0xca>
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	21 f0       	breq	.+8      	; 0x120a <DIO_set_port_direction+0x2c>
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 23       	and	r24, r24
    1206:	09 f0       	breq	.+2      	; 0x120a <DIO_set_port_direction+0x2c>
    1208:	4f c0       	rjmp	.+158    	; 0x12a8 <DIO_set_port_direction+0xca>
      (pin_direction == Output || pin_direction == INput)) {

    switch (port_id) {
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3d 83       	std	Y+5, r19	; 0x05
    1212:	2c 83       	std	Y+4, r18	; 0x04
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	91 05       	cpc	r25, r1
    121c:	c1 f0       	breq	.+48     	; 0x124e <DIO_set_port_direction+0x70>
    121e:	2c 81       	ldd	r18, Y+4	; 0x04
    1220:	3d 81       	ldd	r19, Y+5	; 0x05
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	11 f1       	breq	.+68     	; 0x126c <DIO_set_port_direction+0x8e>
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	69 f5       	brne	.+90     	; 0x128a <DIO_set_port_direction+0xac>

      /******************  PORT A ********************/

    case (PORTA):

      switch (pin_direction) {
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	91 05       	cpc	r25, r1
    123a:	29 f4       	brne	.+10     	; 0x1246 <DIO_set_port_direction+0x68>
      case (Output):
        DDRA_REG = 0xff;
    123c:	ea e3       	ldi	r30, 0x3A	; 58
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	8f ef       	ldi	r24, 0xFF	; 255
    1242:	80 83       	st	Z, r24
    1244:	32 c0       	rjmp	.+100    	; 0x12aa <DIO_set_port_direction+0xcc>
        break;

      default:
        DDRA_REG = 0x00;
    1246:	ea e3       	ldi	r30, 0x3A	; 58
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	10 82       	st	Z, r1
    124c:	2e c0       	rjmp	.+92     	; 0x12aa <DIO_set_port_direction+0xcc>
      /***********************************************/

      /*******************PORT B***********************/
    case (PORTB):

      switch (pin_direction) {
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	91 05       	cpc	r25, r1
    1258:	29 f4       	brne	.+10     	; 0x1264 <DIO_set_port_direction+0x86>
      case (Output):
        DDRB_REG = 0xff;
    125a:	e7 e3       	ldi	r30, 0x37	; 55
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	80 83       	st	Z, r24
    1262:	23 c0       	rjmp	.+70     	; 0x12aa <DIO_set_port_direction+0xcc>
        break;

      default:
        DDRB_REG = 0x00;
    1264:	e7 e3       	ldi	r30, 0x37	; 55
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	10 82       	st	Z, r1
    126a:	1f c0       	rjmp	.+62     	; 0x12aa <DIO_set_port_direction+0xcc>
      /***************************************************/

      /******************PORT C***************************/
    case (PORTC):

      switch (pin_direction) {
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	91 05       	cpc	r25, r1
    1276:	29 f4       	brne	.+10     	; 0x1282 <DIO_set_port_direction+0xa4>
      case (Output):
        DDRC_REG = 0xff;
    1278:	e4 e3       	ldi	r30, 0x34	; 52
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	8f ef       	ldi	r24, 0xFF	; 255
    127e:	80 83       	st	Z, r24
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <DIO_set_port_direction+0xcc>
        break;

      default:
        DDRC_REG = 0x00;
    1282:	e4 e3       	ldi	r30, 0x34	; 52
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	10 82       	st	Z, r1
    1288:	10 c0       	rjmp	.+32     	; 0x12aa <DIO_set_port_direction+0xcc>
      /****************************************************/

      /********************PORT D*************************/
    default:

      switch (pin_direction) {
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	91 05       	cpc	r25, r1
    1294:	29 f4       	brne	.+10     	; 0x12a0 <DIO_set_port_direction+0xc2>
      case (Output):
        DDRC_REG = 0xff;
    1296:	e4 e3       	ldi	r30, 0x34	; 52
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8f ef       	ldi	r24, 0xFF	; 255
    129c:	80 83       	st	Z, r24
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <DIO_set_port_direction+0xcc>
        break;

      default:
        DDRC_REG = 0x00;
    12a0:	e4 e3       	ldi	r30, 0x34	; 52
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	10 82       	st	Z, r1
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <DIO_set_port_direction+0xcc>

  }
  /****************************************************/
  else {

    Error_state = Return_NOT_Ok;
    12a8:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <DI_set_port_value>:

/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/

uint_8 DI_set_port_value(uint_8 port_id, uint_8 pin_value) {
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <DI_set_port_value+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <DI_set_port_value+0x8>
    12c4:	0f 92       	push	r0
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	8a 83       	std	Y+2, r24	; 0x02
    12cc:	6b 83       	std	Y+3, r22	; 0x03

  uint_8 Error_state = Return_Ok;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD)) {
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	84 30       	cpi	r24, 0x04	; 4
    12d6:	38 f5       	brcc	.+78     	; 0x1326 <DI_set_port_value+0x6a>

    switch (port_id) {
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	3d 83       	std	Y+5, r19	; 0x05
    12e0:	2c 83       	std	Y+4, r18	; 0x04
    12e2:	8c 81       	ldd	r24, Y+4	; 0x04
    12e4:	9d 81       	ldd	r25, Y+5	; 0x05
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	91 05       	cpc	r25, r1
    12ea:	71 f0       	breq	.+28     	; 0x1308 <DI_set_port_value+0x4c>
    12ec:	2c 81       	ldd	r18, Y+4	; 0x04
    12ee:	3d 81       	ldd	r19, Y+5	; 0x05
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	71 f0       	breq	.+28     	; 0x1312 <DI_set_port_value+0x56>
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	9d 81       	ldd	r25, Y+5	; 0x05
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	79 f4       	brne	.+30     	; 0x131c <DI_set_port_value+0x60>
    case (PORTA):
      PORTA_REG = pin_value;
    12fe:	eb e3       	ldi	r30, 0x3B	; 59
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	80 83       	st	Z, r24
    1306:	10 c0       	rjmp	.+32     	; 0x1328 <DI_set_port_value+0x6c>
      break;

    case (PORTB):
      PORTB_REG = pin_value;
    1308:	e8 e3       	ldi	r30, 0x38	; 56
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	80 83       	st	Z, r24
    1310:	0b c0       	rjmp	.+22     	; 0x1328 <DI_set_port_value+0x6c>
      break;

    case (PORTC):
      PORTC_REG = pin_value;
    1312:	e5 e3       	ldi	r30, 0x35	; 53
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	80 83       	st	Z, r24
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <DI_set_port_value+0x6c>
      break;

    default:
      PORTD_REG = pin_value;
    131c:	e2 e3       	ldi	r30, 0x32	; 50
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	80 83       	st	Z, r24
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <DI_set_port_value+0x6c>
    }
  }

  else {

    Error_state = Return_NOT_Ok;
    1326:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
}
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <DIO_get_port_value>:
uint_8 DIO_get_port_value(uint_8 port_id, uint_8 *return_port_value) {
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <DIO_get_port_value+0x6>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <DIO_get_port_value+0x8>
    1342:	00 d0       	rcall	.+0      	; 0x1344 <DIO_get_port_value+0xa>
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	7c 83       	std	Y+4, r23	; 0x04
    134c:	6b 83       	std	Y+3, r22	; 0x03

  uint_8 Error_state = Return_Ok;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	89 83       	std	Y+1, r24	; 0x01
  if ((port_id <= PORTD) && (return_port_value != NULL)) {
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	84 30       	cpi	r24, 0x04	; 4
    1356:	98 f5       	brcc	.+102    	; 0x13be <DIO_get_port_value+0x84>
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	79 f1       	breq	.+94     	; 0x13be <DIO_get_port_value+0x84>

    switch (port_id) {
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3e 83       	std	Y+6, r19	; 0x06
    1368:	2d 83       	std	Y+5, r18	; 0x05
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	91 05       	cpc	r25, r1
    1372:	81 f0       	breq	.+32     	; 0x1394 <DIO_get_port_value+0x5a>
    1374:	2d 81       	ldd	r18, Y+5	; 0x05
    1376:	3e 81       	ldd	r19, Y+6	; 0x06
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	91 f0       	breq	.+36     	; 0x13a2 <DIO_get_port_value+0x68>
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	a9 f4       	brne	.+42     	; 0x13b0 <DIO_get_port_value+0x76>
    case (PORTA):
      *return_port_value = PINA_REG;
    1386:	e9 e3       	ldi	r30, 0x39	; 57
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	eb 81       	ldd	r30, Y+3	; 0x03
    138e:	fc 81       	ldd	r31, Y+4	; 0x04
    1390:	80 83       	st	Z, r24
    1392:	16 c0       	rjmp	.+44     	; 0x13c0 <DIO_get_port_value+0x86>
      break;

    case (PORTB):
      *return_port_value = PINB_REG;
    1394:	e6 e3       	ldi	r30, 0x36	; 54
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	eb 81       	ldd	r30, Y+3	; 0x03
    139c:	fc 81       	ldd	r31, Y+4	; 0x04
    139e:	80 83       	st	Z, r24
    13a0:	0f c0       	rjmp	.+30     	; 0x13c0 <DIO_get_port_value+0x86>
      break;

    case (PORTC):
      *return_port_value = PINC_REG;
    13a2:	e3 e3       	ldi	r30, 0x33	; 51
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	eb 81       	ldd	r30, Y+3	; 0x03
    13aa:	fc 81       	ldd	r31, Y+4	; 0x04
    13ac:	80 83       	st	Z, r24
    13ae:	08 c0       	rjmp	.+16     	; 0x13c0 <DIO_get_port_value+0x86>
      break;

    default:
      *return_port_value = PIND_REG;
    13b0:	e0 e3       	ldi	r30, 0x30	; 48
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	eb 81       	ldd	r30, Y+3	; 0x03
    13b8:	fc 81       	ldd	r31, Y+4	; 0x04
    13ba:	80 83       	st	Z, r24
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <DIO_get_port_value+0x86>
    }
  }

  else {

    Error_state = Return_NOT_Ok;
    13be:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c2:	26 96       	adiw	r28, 0x06	; 6
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <LCD_init>:
/*LCD includes*/
#include "LCD_config.h"
#include "LCD_interface.h"
#include "LCD_private.h"

void LCD_init(void) {
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	cc 54       	subi	r28, 0x4C	; 76
    13e2:	d0 40       	sbci	r29, 0x00	; 0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	fe 01       	movw	r30, r28
    13f0:	e7 5b       	subi	r30, 0xB7	; 183
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	ac e0       	ldi	r26, 0x0C	; 12
    13fa:	b2 e4       	ldi	r27, 0x42	; 66
    13fc:	80 83       	st	Z, r24
    13fe:	91 83       	std	Z+1, r25	; 0x01
    1400:	a2 83       	std	Z+2, r26	; 0x02
    1402:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1404:	8e 01       	movw	r16, r28
    1406:	0b 5b       	subi	r16, 0xBB	; 187
    1408:	1f 4f       	sbci	r17, 0xFF	; 255
    140a:	fe 01       	movw	r30, r28
    140c:	e7 5b       	subi	r30, 0xB7	; 183
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	4a ef       	ldi	r20, 0xFA	; 250
    141e:	54 e4       	ldi	r21, 0x44	; 68
    1420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	f8 01       	movw	r30, r16
    142a:	80 83       	st	Z, r24
    142c:	91 83       	std	Z+1, r25	; 0x01
    142e:	a2 83       	std	Z+2, r26	; 0x02
    1430:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1432:	fe 01       	movw	r30, r28
    1434:	eb 5b       	subi	r30, 0xBB	; 187
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	60 81       	ld	r22, Z
    143a:	71 81       	ldd	r23, Z+1	; 0x01
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e8       	ldi	r20, 0x80	; 128
    1446:	5f e3       	ldi	r21, 0x3F	; 63
    1448:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    144c:	88 23       	and	r24, r24
    144e:	44 f4       	brge	.+16     	; 0x1460 <LCD_init+0x8c>
		__ticks = 1;
    1450:	fe 01       	movw	r30, r28
    1452:	ed 5b       	subi	r30, 0xBD	; 189
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	80 83       	st	Z, r24
    145e:	64 c0       	rjmp	.+200    	; 0x1528 <LCD_init+0x154>
	else if (__tmp > 65535)
    1460:	fe 01       	movw	r30, r28
    1462:	eb 5b       	subi	r30, 0xBB	; 187
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	3f ef       	ldi	r19, 0xFF	; 255
    1472:	4f e7       	ldi	r20, 0x7F	; 127
    1474:	57 e4       	ldi	r21, 0x47	; 71
    1476:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    147a:	18 16       	cp	r1, r24
    147c:	0c f0       	brlt	.+2      	; 0x1480 <LCD_init+0xac>
    147e:	43 c0       	rjmp	.+134    	; 0x1506 <LCD_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1480:	fe 01       	movw	r30, r28
    1482:	e7 5b       	subi	r30, 0xB7	; 183
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	60 81       	ld	r22, Z
    1488:	71 81       	ldd	r23, Z+1	; 0x01
    148a:	82 81       	ldd	r24, Z+2	; 0x02
    148c:	93 81       	ldd	r25, Z+3	; 0x03
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e2       	ldi	r20, 0x20	; 32
    1494:	51 e4       	ldi	r21, 0x41	; 65
    1496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	8e 01       	movw	r16, r28
    14a0:	0d 5b       	subi	r16, 0xBD	; 189
    14a2:	1f 4f       	sbci	r17, 0xFF	; 255
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	f8 01       	movw	r30, r16
    14b2:	91 83       	std	Z+1, r25	; 0x01
    14b4:	80 83       	st	Z, r24
    14b6:	1f c0       	rjmp	.+62     	; 0x14f6 <LCD_init+0x122>
    14b8:	fe 01       	movw	r30, r28
    14ba:	ef 5b       	subi	r30, 0xBF	; 191
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	88 ec       	ldi	r24, 0xC8	; 200
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	91 83       	std	Z+1, r25	; 0x01
    14c4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14c6:	fe 01       	movw	r30, r28
    14c8:	ef 5b       	subi	r30, 0xBF	; 191
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <LCD_init+0xfc>
    14d4:	fe 01       	movw	r30, r28
    14d6:	ef 5b       	subi	r30, 0xBF	; 191
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14de:	de 01       	movw	r26, r28
    14e0:	ad 5b       	subi	r26, 0xBD	; 189
    14e2:	bf 4f       	sbci	r27, 0xFF	; 255
    14e4:	fe 01       	movw	r30, r28
    14e6:	ed 5b       	subi	r30, 0xBD	; 189
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	11 96       	adiw	r26, 0x01	; 1
    14f2:	9c 93       	st	X, r25
    14f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f6:	fe 01       	movw	r30, r28
    14f8:	ed 5b       	subi	r30, 0xBD	; 189
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	80 81       	ld	r24, Z
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	d1 f6       	brne	.-76     	; 0x14b8 <LCD_init+0xe4>
    1504:	24 c0       	rjmp	.+72     	; 0x154e <LCD_init+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1506:	8e 01       	movw	r16, r28
    1508:	0d 5b       	subi	r16, 0xBD	; 189
    150a:	1f 4f       	sbci	r17, 0xFF	; 255
    150c:	fe 01       	movw	r30, r28
    150e:	eb 5b       	subi	r30, 0xBB	; 187
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	60 81       	ld	r22, Z
    1514:	71 81       	ldd	r23, Z+1	; 0x01
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	93 81       	ldd	r25, Z+3	; 0x03
    151a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	f8 01       	movw	r30, r16
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	80 83       	st	Z, r24
    1528:	fe 01       	movw	r30, r28
    152a:	ed 5b       	subi	r30, 0xBD	; 189
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	fe 01       	movw	r30, r28
    1534:	ff 96       	adiw	r30, 0x3f	; 63
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
    153a:	fe 01       	movw	r30, r28
    153c:	ff 96       	adiw	r30, 0x3f	; 63
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_init+0x16e>
    1546:	fe 01       	movw	r30, r28
    1548:	ff 96       	adiw	r30, 0x3f	; 63
    154a:	91 83       	std	Z+1, r25	; 0x01
    154c:	80 83       	st	Z, r24
#if LCD_MODE == LCD_8_BIT_MODE
  /*8_bit initialization for LCD */

  _delay_ms(35);

  LCD_send_cmnd(0b00111000);
    154e:	88 e3       	ldi	r24, 0x38	; 56
    1550:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	a0 e2       	ldi	r26, 0x20	; 32
    155a:	b2 e4       	ldi	r27, 0x42	; 66
    155c:	8b af       	std	Y+59, r24	; 0x3b
    155e:	9c af       	std	Y+60, r25	; 0x3c
    1560:	ad af       	std	Y+61, r26	; 0x3d
    1562:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1564:	6b ad       	ldd	r22, Y+59	; 0x3b
    1566:	7c ad       	ldd	r23, Y+60	; 0x3c
    1568:	8d ad       	ldd	r24, Y+61	; 0x3d
    156a:	9e ad       	ldd	r25, Y+62	; 0x3e
    156c:	2b ea       	ldi	r18, 0xAB	; 171
    156e:	3a ea       	ldi	r19, 0xAA	; 170
    1570:	4a e2       	ldi	r20, 0x2A	; 42
    1572:	50 e4       	ldi	r21, 0x40	; 64
    1574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	8f ab       	std	Y+55, r24	; 0x37
    157e:	98 af       	std	Y+56, r25	; 0x38
    1580:	a9 af       	std	Y+57, r26	; 0x39
    1582:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1584:	6f a9       	ldd	r22, Y+55	; 0x37
    1586:	78 ad       	ldd	r23, Y+56	; 0x38
    1588:	89 ad       	ldd	r24, Y+57	; 0x39
    158a:	9a ad       	ldd	r25, Y+58	; 0x3a
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e8       	ldi	r20, 0x80	; 128
    1592:	5f e3       	ldi	r21, 0x3F	; 63
    1594:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1598:	88 23       	and	r24, r24
    159a:	1c f4       	brge	.+6      	; 0x15a2 <LCD_init+0x1ce>
		__ticks = 1;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	8e ab       	std	Y+54, r24	; 0x36
    15a0:	91 c0       	rjmp	.+290    	; 0x16c4 <LCD_init+0x2f0>
	else if (__tmp > 255)
    15a2:	6f a9       	ldd	r22, Y+55	; 0x37
    15a4:	78 ad       	ldd	r23, Y+56	; 0x38
    15a6:	89 ad       	ldd	r24, Y+57	; 0x39
    15a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4f e7       	ldi	r20, 0x7F	; 127
    15b0:	53 e4       	ldi	r21, 0x43	; 67
    15b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15b6:	18 16       	cp	r1, r24
    15b8:	0c f0       	brlt	.+2      	; 0x15bc <LCD_init+0x1e8>
    15ba:	7b c0       	rjmp	.+246    	; 0x16b2 <LCD_init+0x2de>
	{
		_delay_ms(__us / 1000.0);
    15bc:	6b ad       	ldd	r22, Y+59	; 0x3b
    15be:	7c ad       	ldd	r23, Y+60	; 0x3c
    15c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    15c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4a e7       	ldi	r20, 0x7A	; 122
    15ca:	54 e4       	ldi	r21, 0x44	; 68
    15cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	8a ab       	std	Y+50, r24	; 0x32
    15d6:	9b ab       	std	Y+51, r25	; 0x33
    15d8:	ac ab       	std	Y+52, r26	; 0x34
    15da:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15dc:	6a a9       	ldd	r22, Y+50	; 0x32
    15de:	7b a9       	ldd	r23, Y+51	; 0x33
    15e0:	8c a9       	ldd	r24, Y+52	; 0x34
    15e2:	9d a9       	ldd	r25, Y+53	; 0x35
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	4a ef       	ldi	r20, 0xFA	; 250
    15ea:	54 e4       	ldi	r21, 0x44	; 68
    15ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	8e a7       	std	Y+46, r24	; 0x2e
    15f6:	9f a7       	std	Y+47, r25	; 0x2f
    15f8:	a8 ab       	std	Y+48, r26	; 0x30
    15fa:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    15fc:	6e a5       	ldd	r22, Y+46	; 0x2e
    15fe:	7f a5       	ldd	r23, Y+47	; 0x2f
    1600:	88 a9       	ldd	r24, Y+48	; 0x30
    1602:	99 a9       	ldd	r25, Y+49	; 0x31
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e8       	ldi	r20, 0x80	; 128
    160a:	5f e3       	ldi	r21, 0x3F	; 63
    160c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1610:	88 23       	and	r24, r24
    1612:	2c f4       	brge	.+10     	; 0x161e <LCD_init+0x24a>
		__ticks = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	9d a7       	std	Y+45, r25	; 0x2d
    161a:	8c a7       	std	Y+44, r24	; 0x2c
    161c:	3f c0       	rjmp	.+126    	; 0x169c <LCD_init+0x2c8>
	else if (__tmp > 65535)
    161e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1620:	7f a5       	ldd	r23, Y+47	; 0x2f
    1622:	88 a9       	ldd	r24, Y+48	; 0x30
    1624:	99 a9       	ldd	r25, Y+49	; 0x31
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	3f ef       	ldi	r19, 0xFF	; 255
    162a:	4f e7       	ldi	r20, 0x7F	; 127
    162c:	57 e4       	ldi	r21, 0x47	; 71
    162e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1632:	18 16       	cp	r1, r24
    1634:	4c f5       	brge	.+82     	; 0x1688 <LCD_init+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1636:	6a a9       	ldd	r22, Y+50	; 0x32
    1638:	7b a9       	ldd	r23, Y+51	; 0x33
    163a:	8c a9       	ldd	r24, Y+52	; 0x34
    163c:	9d a9       	ldd	r25, Y+53	; 0x35
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e2       	ldi	r20, 0x20	; 32
    1644:	51 e4       	ldi	r21, 0x41	; 65
    1646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9d a7       	std	Y+45, r25	; 0x2d
    165c:	8c a7       	std	Y+44, r24	; 0x2c
    165e:	0f c0       	rjmp	.+30     	; 0x167e <LCD_init+0x2aa>
    1660:	88 ec       	ldi	r24, 0xC8	; 200
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	9b a7       	std	Y+43, r25	; 0x2b
    1666:	8a a7       	std	Y+42, r24	; 0x2a
    1668:	8a a5       	ldd	r24, Y+42	; 0x2a
    166a:	9b a5       	ldd	r25, Y+43	; 0x2b
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <LCD_init+0x298>
    1670:	9b a7       	std	Y+43, r25	; 0x2b
    1672:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1674:	8c a5       	ldd	r24, Y+44	; 0x2c
    1676:	9d a5       	ldd	r25, Y+45	; 0x2d
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	9d a7       	std	Y+45, r25	; 0x2d
    167c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1680:	9d a5       	ldd	r25, Y+45	; 0x2d
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	69 f7       	brne	.-38     	; 0x1660 <LCD_init+0x28c>
    1686:	24 c0       	rjmp	.+72     	; 0x16d0 <LCD_init+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1688:	6e a5       	ldd	r22, Y+46	; 0x2e
    168a:	7f a5       	ldd	r23, Y+47	; 0x2f
    168c:	88 a9       	ldd	r24, Y+48	; 0x30
    168e:	99 a9       	ldd	r25, Y+49	; 0x31
    1690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	9d a7       	std	Y+45, r25	; 0x2d
    169a:	8c a7       	std	Y+44, r24	; 0x2c
    169c:	8c a5       	ldd	r24, Y+44	; 0x2c
    169e:	9d a5       	ldd	r25, Y+45	; 0x2d
    16a0:	99 a7       	std	Y+41, r25	; 0x29
    16a2:	88 a7       	std	Y+40, r24	; 0x28
    16a4:	88 a5       	ldd	r24, Y+40	; 0x28
    16a6:	99 a5       	ldd	r25, Y+41	; 0x29
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <LCD_init+0x2d4>
    16ac:	99 a7       	std	Y+41, r25	; 0x29
    16ae:	88 a7       	std	Y+40, r24	; 0x28
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <LCD_init+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16b2:	6f a9       	ldd	r22, Y+55	; 0x37
    16b4:	78 ad       	ldd	r23, Y+56	; 0x38
    16b6:	89 ad       	ldd	r24, Y+57	; 0x39
    16b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    16ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	8e ab       	std	Y+54, r24	; 0x36
    16c4:	8e a9       	ldd	r24, Y+54	; 0x36
    16c6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16c8:	8f a1       	ldd	r24, Y+39	; 0x27
    16ca:	8a 95       	dec	r24
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <LCD_init+0x2f6>
    16ce:	8f a3       	std	Y+39, r24	; 0x27

  _delay_us(40);

  LCD_send_cmnd(0b00001111);
    16d0:	8f e0       	ldi	r24, 0x0F	; 15
    16d2:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a0 e2       	ldi	r26, 0x20	; 32
    16dc:	b2 e4       	ldi	r27, 0x42	; 66
    16de:	8b a3       	std	Y+35, r24	; 0x23
    16e0:	9c a3       	std	Y+36, r25	; 0x24
    16e2:	ad a3       	std	Y+37, r26	; 0x25
    16e4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16e6:	6b a1       	ldd	r22, Y+35	; 0x23
    16e8:	7c a1       	ldd	r23, Y+36	; 0x24
    16ea:	8d a1       	ldd	r24, Y+37	; 0x25
    16ec:	9e a1       	ldd	r25, Y+38	; 0x26
    16ee:	2b ea       	ldi	r18, 0xAB	; 171
    16f0:	3a ea       	ldi	r19, 0xAA	; 170
    16f2:	4a e2       	ldi	r20, 0x2A	; 42
    16f4:	50 e4       	ldi	r21, 0x40	; 64
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	8f 8f       	std	Y+31, r24	; 0x1f
    1700:	98 a3       	std	Y+32, r25	; 0x20
    1702:	a9 a3       	std	Y+33, r26	; 0x21
    1704:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1706:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1708:	78 a1       	ldd	r23, Y+32	; 0x20
    170a:	89 a1       	ldd	r24, Y+33	; 0x21
    170c:	9a a1       	ldd	r25, Y+34	; 0x22
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    171a:	88 23       	and	r24, r24
    171c:	1c f4       	brge	.+6      	; 0x1724 <LCD_init+0x350>
		__ticks = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	8e 8f       	std	Y+30, r24	; 0x1e
    1722:	91 c0       	rjmp	.+290    	; 0x1846 <LCD_init+0x472>
	else if (__tmp > 255)
    1724:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1726:	78 a1       	ldd	r23, Y+32	; 0x20
    1728:	89 a1       	ldd	r24, Y+33	; 0x21
    172a:	9a a1       	ldd	r25, Y+34	; 0x22
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4f e7       	ldi	r20, 0x7F	; 127
    1732:	53 e4       	ldi	r21, 0x43	; 67
    1734:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1738:	18 16       	cp	r1, r24
    173a:	0c f0       	brlt	.+2      	; 0x173e <LCD_init+0x36a>
    173c:	7b c0       	rjmp	.+246    	; 0x1834 <LCD_init+0x460>
	{
		_delay_ms(__us / 1000.0);
    173e:	6b a1       	ldd	r22, Y+35	; 0x23
    1740:	7c a1       	ldd	r23, Y+36	; 0x24
    1742:	8d a1       	ldd	r24, Y+37	; 0x25
    1744:	9e a1       	ldd	r25, Y+38	; 0x26
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	4a e7       	ldi	r20, 0x7A	; 122
    174c:	54 e4       	ldi	r21, 0x44	; 68
    174e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	8a 8f       	std	Y+26, r24	; 0x1a
    1758:	9b 8f       	std	Y+27, r25	; 0x1b
    175a:	ac 8f       	std	Y+28, r26	; 0x1c
    175c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1760:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1762:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1764:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	4a ef       	ldi	r20, 0xFA	; 250
    176c:	54 e4       	ldi	r21, 0x44	; 68
    176e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	8e 8b       	std	Y+22, r24	; 0x16
    1778:	9f 8b       	std	Y+23, r25	; 0x17
    177a:	a8 8f       	std	Y+24, r26	; 0x18
    177c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    177e:	6e 89       	ldd	r22, Y+22	; 0x16
    1780:	7f 89       	ldd	r23, Y+23	; 0x17
    1782:	88 8d       	ldd	r24, Y+24	; 0x18
    1784:	99 8d       	ldd	r25, Y+25	; 0x19
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e8       	ldi	r20, 0x80	; 128
    178c:	5f e3       	ldi	r21, 0x3F	; 63
    178e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1792:	88 23       	and	r24, r24
    1794:	2c f4       	brge	.+10     	; 0x17a0 <LCD_init+0x3cc>
		__ticks = 1;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9d 8b       	std	Y+21, r25	; 0x15
    179c:	8c 8b       	std	Y+20, r24	; 0x14
    179e:	3f c0       	rjmp	.+126    	; 0x181e <LCD_init+0x44a>
	else if (__tmp > 65535)
    17a0:	6e 89       	ldd	r22, Y+22	; 0x16
    17a2:	7f 89       	ldd	r23, Y+23	; 0x17
    17a4:	88 8d       	ldd	r24, Y+24	; 0x18
    17a6:	99 8d       	ldd	r25, Y+25	; 0x19
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    17ac:	4f e7       	ldi	r20, 0x7F	; 127
    17ae:	57 e4       	ldi	r21, 0x47	; 71
    17b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17b4:	18 16       	cp	r1, r24
    17b6:	4c f5       	brge	.+82     	; 0x180a <LCD_init+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    17ba:	7b 8d       	ldd	r23, Y+27	; 0x1b
    17bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e2       	ldi	r20, 0x20	; 32
    17c6:	51 e4       	ldi	r21, 0x41	; 65
    17c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	bc 01       	movw	r22, r24
    17d2:	cd 01       	movw	r24, r26
    17d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	9d 8b       	std	Y+21, r25	; 0x15
    17de:	8c 8b       	std	Y+20, r24	; 0x14
    17e0:	0f c0       	rjmp	.+30     	; 0x1800 <LCD_init+0x42c>
    17e2:	88 ec       	ldi	r24, 0xC8	; 200
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	9b 8b       	std	Y+19, r25	; 0x13
    17e8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17ea:	8a 89       	ldd	r24, Y+18	; 0x12
    17ec:	9b 89       	ldd	r25, Y+19	; 0x13
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <LCD_init+0x41a>
    17f2:	9b 8b       	std	Y+19, r25	; 0x13
    17f4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f6:	8c 89       	ldd	r24, Y+20	; 0x14
    17f8:	9d 89       	ldd	r25, Y+21	; 0x15
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	9d 8b       	std	Y+21, r25	; 0x15
    17fe:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1800:	8c 89       	ldd	r24, Y+20	; 0x14
    1802:	9d 89       	ldd	r25, Y+21	; 0x15
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	69 f7       	brne	.-38     	; 0x17e2 <LCD_init+0x40e>
    1808:	24 c0       	rjmp	.+72     	; 0x1852 <LCD_init+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180a:	6e 89       	ldd	r22, Y+22	; 0x16
    180c:	7f 89       	ldd	r23, Y+23	; 0x17
    180e:	88 8d       	ldd	r24, Y+24	; 0x18
    1810:	99 8d       	ldd	r25, Y+25	; 0x19
    1812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	9d 8b       	std	Y+21, r25	; 0x15
    181c:	8c 8b       	std	Y+20, r24	; 0x14
    181e:	8c 89       	ldd	r24, Y+20	; 0x14
    1820:	9d 89       	ldd	r25, Y+21	; 0x15
    1822:	99 8b       	std	Y+17, r25	; 0x11
    1824:	88 8b       	std	Y+16, r24	; 0x10
    1826:	88 89       	ldd	r24, Y+16	; 0x10
    1828:	99 89       	ldd	r25, Y+17	; 0x11
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <LCD_init+0x456>
    182e:	99 8b       	std	Y+17, r25	; 0x11
    1830:	88 8b       	std	Y+16, r24	; 0x10
    1832:	0f c0       	rjmp	.+30     	; 0x1852 <LCD_init+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1834:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1836:	78 a1       	ldd	r23, Y+32	; 0x20
    1838:	89 a1       	ldd	r24, Y+33	; 0x21
    183a:	9a a1       	ldd	r25, Y+34	; 0x22
    183c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	8e 8f       	std	Y+30, r24	; 0x1e
    1846:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1848:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    184a:	8f 85       	ldd	r24, Y+15	; 0x0f
    184c:	8a 95       	dec	r24
    184e:	f1 f7       	brne	.-4      	; 0x184c <LCD_init+0x478>
    1850:	8f 87       	std	Y+15, r24	; 0x0f

  _delay_us(40);

  LCD_send_cmnd(0b00000001);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a0 e0       	ldi	r26, 0x00	; 0
    185e:	b0 e4       	ldi	r27, 0x40	; 64
    1860:	8b 87       	std	Y+11, r24	; 0x0b
    1862:	9c 87       	std	Y+12, r25	; 0x0c
    1864:	ad 87       	std	Y+13, r26	; 0x0d
    1866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1868:	6b 85       	ldd	r22, Y+11	; 0x0b
    186a:	7c 85       	ldd	r23, Y+12	; 0x0c
    186c:	8d 85       	ldd	r24, Y+13	; 0x0d
    186e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	4a ef       	ldi	r20, 0xFA	; 250
    1876:	54 e4       	ldi	r21, 0x44	; 68
    1878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	8f 83       	std	Y+7, r24	; 0x07
    1882:	98 87       	std	Y+8, r25	; 0x08
    1884:	a9 87       	std	Y+9, r26	; 0x09
    1886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1888:	6f 81       	ldd	r22, Y+7	; 0x07
    188a:	78 85       	ldd	r23, Y+8	; 0x08
    188c:	89 85       	ldd	r24, Y+9	; 0x09
    188e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e8       	ldi	r20, 0x80	; 128
    1896:	5f e3       	ldi	r21, 0x3F	; 63
    1898:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    189c:	88 23       	and	r24, r24
    189e:	2c f4       	brge	.+10     	; 0x18aa <LCD_init+0x4d6>
		__ticks = 1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <LCD_init+0x554>
	else if (__tmp > 65535)
    18aa:	6f 81       	ldd	r22, Y+7	; 0x07
    18ac:	78 85       	ldd	r23, Y+8	; 0x08
    18ae:	89 85       	ldd	r24, Y+9	; 0x09
    18b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	3f ef       	ldi	r19, 0xFF	; 255
    18b6:	4f e7       	ldi	r20, 0x7F	; 127
    18b8:	57 e4       	ldi	r21, 0x47	; 71
    18ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18be:	18 16       	cp	r1, r24
    18c0:	4c f5       	brge	.+82     	; 0x1914 <LCD_init+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e2       	ldi	r20, 0x20	; 32
    18d0:	51 e4       	ldi	r21, 0x41	; 65
    18d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	bc 01       	movw	r22, r24
    18dc:	cd 01       	movw	r24, r26
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	9e 83       	std	Y+6, r25	; 0x06
    18e8:	8d 83       	std	Y+5, r24	; 0x05
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <LCD_init+0x536>
    18ec:	88 ec       	ldi	r24, 0xC8	; 200
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9c 83       	std	Y+4, r25	; 0x04
    18f2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <LCD_init+0x524>
    18fc:	9c 83       	std	Y+4, r25	; 0x04
    18fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1900:	8d 81       	ldd	r24, Y+5	; 0x05
    1902:	9e 81       	ldd	r25, Y+6	; 0x06
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	9e 83       	std	Y+6, r25	; 0x06
    1908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190a:	8d 81       	ldd	r24, Y+5	; 0x05
    190c:	9e 81       	ldd	r25, Y+6	; 0x06
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	69 f7       	brne	.-38     	; 0x18ec <LCD_init+0x518>
    1912:	14 c0       	rjmp	.+40     	; 0x193c <LCD_init+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1914:	6f 81       	ldd	r22, Y+7	; 0x07
    1916:	78 85       	ldd	r23, Y+8	; 0x08
    1918:	89 85       	ldd	r24, Y+9	; 0x09
    191a:	9a 85       	ldd	r25, Y+10	; 0x0a
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	9e 83       	std	Y+6, r25	; 0x06
    1926:	8d 83       	std	Y+5, r24	; 0x05
    1928:	8d 81       	ldd	r24, Y+5	; 0x05
    192a:	9e 81       	ldd	r25, Y+6	; 0x06
    192c:	9a 83       	std	Y+2, r25	; 0x02
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_init+0x560>
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01

  _delay_ms(2);

  LCD_send_cmnd(0b00000110);
    193c:	86 e0       	ldi	r24, 0x06	; 6
    193e:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>

  LCD_send_cmnd(0b00000000);
  LCD_send_cmnd(0b01100000);

#endif
}
    1942:	c4 5b       	subi	r28, 0xB4	; 180
    1944:	df 4f       	sbci	r29, 0xFF	; 255
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	08 95       	ret

0000195a <LCD_send_cmnd>:
void LCD_send_cmnd(uint_8 cmnd) {
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	69 97       	sbiw	r28, 0x19	; 25
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	89 8f       	std	Y+25, r24	; 0x19

  /*directons of all pins will be set from config file of DIO driver*/

#if LCD_MODE == LCD_8_BIT_MODE

  DI_set_pin_value(LCD_PORT_RS, LCD_PIN_RS,
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	63 e0       	ldi	r22, 0x03	; 3
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
                   Pin_low); /* RS low vlotage to recive cmnd*/

  DI_set_pin_value(LCD_PORT_Rw, LCD_PIN_RW,
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	64 e0       	ldi	r22, 0x04	; 4
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
                   Pin_low); /* RW low vlotage to write on LCD*/

  DI_set_port_value(LCD_PORT_DATA,
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	69 8d       	ldd	r22, Y+25	; 0x19
    1988:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DI_set_port_value>
                    cmnd); /* wrire cmnd on port that is connected with LCD*/

  DI_set_pin_value(
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	65 e0       	ldi	r22, 0x05	; 5
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	a0 e8       	ldi	r26, 0x80	; 128
    199c:	bf e3       	ldi	r27, 0x3F	; 63
    199e:	8d 8b       	std	Y+21, r24	; 0x15
    19a0:	9e 8b       	std	Y+22, r25	; 0x16
    19a2:	af 8b       	std	Y+23, r26	; 0x17
    19a4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19a6:	6d 89       	ldd	r22, Y+21	; 0x15
    19a8:	7e 89       	ldd	r23, Y+22	; 0x16
    19aa:	8f 89       	ldd	r24, Y+23	; 0x17
    19ac:	98 8d       	ldd	r25, Y+24	; 0x18
    19ae:	2b ea       	ldi	r18, 0xAB	; 171
    19b0:	3a ea       	ldi	r19, 0xAA	; 170
    19b2:	4a e2       	ldi	r20, 0x2A	; 42
    19b4:	50 e4       	ldi	r21, 0x40	; 64
    19b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	89 8b       	std	Y+17, r24	; 0x11
    19c0:	9a 8b       	std	Y+18, r25	; 0x12
    19c2:	ab 8b       	std	Y+19, r26	; 0x13
    19c4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19c6:	69 89       	ldd	r22, Y+17	; 0x11
    19c8:	7a 89       	ldd	r23, Y+18	; 0x12
    19ca:	8b 89       	ldd	r24, Y+19	; 0x13
    19cc:	9c 89       	ldd	r25, Y+20	; 0x14
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e8       	ldi	r20, 0x80	; 128
    19d4:	5f e3       	ldi	r21, 0x3F	; 63
    19d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19da:	88 23       	and	r24, r24
    19dc:	1c f4       	brge	.+6      	; 0x19e4 <LCD_send_cmnd+0x8a>
		__ticks = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	88 8b       	std	Y+16, r24	; 0x10
    19e2:	91 c0       	rjmp	.+290    	; 0x1b06 <LCD_send_cmnd+0x1ac>
	else if (__tmp > 255)
    19e4:	69 89       	ldd	r22, Y+17	; 0x11
    19e6:	7a 89       	ldd	r23, Y+18	; 0x12
    19e8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ea:	9c 89       	ldd	r25, Y+20	; 0x14
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4f e7       	ldi	r20, 0x7F	; 127
    19f2:	53 e4       	ldi	r21, 0x43	; 67
    19f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	0c f0       	brlt	.+2      	; 0x19fe <LCD_send_cmnd+0xa4>
    19fc:	7b c0       	rjmp	.+246    	; 0x1af4 <LCD_send_cmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    19fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1a00:	7e 89       	ldd	r23, Y+22	; 0x16
    1a02:	8f 89       	ldd	r24, Y+23	; 0x17
    1a04:	98 8d       	ldd	r25, Y+24	; 0x18
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4a e7       	ldi	r20, 0x7A	; 122
    1a0c:	54 e4       	ldi	r21, 0x44	; 68
    1a0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	8c 87       	std	Y+12, r24	; 0x0c
    1a18:	9d 87       	std	Y+13, r25	; 0x0d
    1a1a:	ae 87       	std	Y+14, r26	; 0x0e
    1a1c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a20:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a22:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a24:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a ef       	ldi	r20, 0xFA	; 250
    1a2c:	54 e4       	ldi	r21, 0x44	; 68
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	88 87       	std	Y+8, r24	; 0x08
    1a38:	99 87       	std	Y+9, r25	; 0x09
    1a3a:	aa 87       	std	Y+10, r26	; 0x0a
    1a3c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a3e:	68 85       	ldd	r22, Y+8	; 0x08
    1a40:	79 85       	ldd	r23, Y+9	; 0x09
    1a42:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a44:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <LCD_send_cmnd+0x106>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9f 83       	std	Y+7, r25	; 0x07
    1a5c:	8e 83       	std	Y+6, r24	; 0x06
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <LCD_send_cmnd+0x184>
	else if (__tmp > 65535)
    1a60:	68 85       	ldd	r22, Y+8	; 0x08
    1a62:	79 85       	ldd	r23, Y+9	; 0x09
    1a64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f5       	brge	.+82     	; 0x1aca <LCD_send_cmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a78:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a7a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e2       	ldi	r20, 0x20	; 32
    1a86:	51 e4       	ldi	r21, 0x41	; 65
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9f 83       	std	Y+7, r25	; 0x07
    1a9e:	8e 83       	std	Y+6, r24	; 0x06
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LCD_send_cmnd+0x166>
    1aa2:	88 ec       	ldi	r24, 0xC8	; 200
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9d 83       	std	Y+5, r25	; 0x05
    1aa8:	8c 83       	std	Y+4, r24	; 0x04
    1aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1aac:	9d 81       	ldd	r25, Y+5	; 0x05
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_send_cmnd+0x154>
    1ab2:	9d 83       	std	Y+5, r25	; 0x05
    1ab4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	9f 83       	std	Y+7, r25	; 0x07
    1abe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <LCD_send_cmnd+0x148>
    1ac8:	24 c0       	rjmp	.+72     	; 0x1b12 <LCD_send_cmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	68 85       	ldd	r22, Y+8	; 0x08
    1acc:	79 85       	ldd	r23, Y+9	; 0x09
    1ace:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ad0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9f 83       	std	Y+7, r25	; 0x07
    1adc:	8e 83       	std	Y+6, r24	; 0x06
    1ade:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae2:	9b 83       	std	Y+3, r25	; 0x03
    1ae4:	8a 83       	std	Y+2, r24	; 0x02
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_send_cmnd+0x190>
    1aee:	9b 83       	std	Y+3, r25	; 0x03
    1af0:	8a 83       	std	Y+2, r24	; 0x02
    1af2:	0f c0       	rjmp	.+30     	; 0x1b12 <LCD_send_cmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1af4:	69 89       	ldd	r22, Y+17	; 0x11
    1af6:	7a 89       	ldd	r23, Y+18	; 0x12
    1af8:	8b 89       	ldd	r24, Y+19	; 0x13
    1afa:	9c 89       	ldd	r25, Y+20	; 0x14
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	88 8b       	std	Y+16, r24	; 0x10
    1b06:	88 89       	ldd	r24, Y+16	; 0x10
    1b08:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	8a 95       	dec	r24
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_send_cmnd+0x1b2>
    1b10:	89 83       	std	Y+1, r24	; 0x01
      LCD_PORT_EN, LCD_PIN_EN,
      Pin_high); /*active enable of LCD to make LCD read the cmnd or data*/

  _delay_us(1); /*delay form En = 0 to En =1  from datasheet page 5*/

  DI_set_pin_value(LCD_PORT_EN, LCD_PIN_EN, Pin_low); /*cancel enable of LCD */
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	65 e0       	ldi	r22, 0x05	; 5
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>

  DI_set_pin_value(LCD_PORT_EN, LCD_PIN_EN, Pin_low);
      /*cancel enable of LCD */ /*cancel enable of LCD */

#endif
}
    1b1c:	69 96       	adiw	r28, 0x19	; 25
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <LCD_write_char>:
void LCD_write_char(uint_8 data) {
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	69 97       	sbiw	r28, 0x19	; 25
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	89 8f       	std	Y+25, r24	; 0x19

#if LCD_MODE == LCD_8_BIT_MODE

  DI_set_pin_value(LCD_PORT_RS, LCD_PIN_RS,
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	63 e0       	ldi	r22, 0x03	; 3
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
                   Pin_high); /* RS high vlotage to recive data*/

  DI_set_pin_value(LCD_PORT_Rw, LCD_PIN_RW,
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	64 e0       	ldi	r22, 0x04	; 4
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
                   Pin_low); /* RW low vlotage to write on LCD*/

  DI_set_port_value(LCD_PORT_DATA,
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b5c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DI_set_port_value>
                    data); /* wrire cmnd on port that is connected with LCD*/

  DI_set_pin_value(
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	65 e0       	ldi	r22, 0x05	; 5
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	a0 e8       	ldi	r26, 0x80	; 128
    1b70:	bf e3       	ldi	r27, 0x3F	; 63
    1b72:	8d 8b       	std	Y+21, r24	; 0x15
    1b74:	9e 8b       	std	Y+22, r25	; 0x16
    1b76:	af 8b       	std	Y+23, r26	; 0x17
    1b78:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b80:	98 8d       	ldd	r25, Y+24	; 0x18
    1b82:	2b ea       	ldi	r18, 0xAB	; 171
    1b84:	3a ea       	ldi	r19, 0xAA	; 170
    1b86:	4a e2       	ldi	r20, 0x2A	; 42
    1b88:	50 e4       	ldi	r21, 0x40	; 64
    1b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	89 8b       	std	Y+17, r24	; 0x11
    1b94:	9a 8b       	std	Y+18, r25	; 0x12
    1b96:	ab 8b       	std	Y+19, r26	; 0x13
    1b98:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b9a:	69 89       	ldd	r22, Y+17	; 0x11
    1b9c:	7a 89       	ldd	r23, Y+18	; 0x12
    1b9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e8       	ldi	r20, 0x80	; 128
    1ba8:	5f e3       	ldi	r21, 0x3F	; 63
    1baa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bae:	88 23       	and	r24, r24
    1bb0:	1c f4       	brge	.+6      	; 0x1bb8 <LCD_write_char+0x8a>
		__ticks = 1;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	88 8b       	std	Y+16, r24	; 0x10
    1bb6:	91 c0       	rjmp	.+290    	; 0x1cda <LCD_write_char+0x1ac>
	else if (__tmp > 255)
    1bb8:	69 89       	ldd	r22, Y+17	; 0x11
    1bba:	7a 89       	ldd	r23, Y+18	; 0x12
    1bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	53 e4       	ldi	r21, 0x43	; 67
    1bc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	0c f0       	brlt	.+2      	; 0x1bd2 <LCD_write_char+0xa4>
    1bd0:	7b c0       	rjmp	.+246    	; 0x1cc8 <LCD_write_char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	4a e7       	ldi	r20, 0x7A	; 122
    1be0:	54 e4       	ldi	r21, 0x44	; 68
    1be2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	8c 87       	std	Y+12, r24	; 0x0c
    1bec:	9d 87       	std	Y+13, r25	; 0x0d
    1bee:	ae 87       	std	Y+14, r26	; 0x0e
    1bf0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bf4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bf8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	4a ef       	ldi	r20, 0xFA	; 250
    1c00:	54 e4       	ldi	r21, 0x44	; 68
    1c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	88 87       	std	Y+8, r24	; 0x08
    1c0c:	99 87       	std	Y+9, r25	; 0x09
    1c0e:	aa 87       	std	Y+10, r26	; 0x0a
    1c10:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c12:	68 85       	ldd	r22, Y+8	; 0x08
    1c14:	79 85       	ldd	r23, Y+9	; 0x09
    1c16:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c18:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e8       	ldi	r20, 0x80	; 128
    1c20:	5f e3       	ldi	r21, 0x3F	; 63
    1c22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c26:	88 23       	and	r24, r24
    1c28:	2c f4       	brge	.+10     	; 0x1c34 <LCD_write_char+0x106>
		__ticks = 1;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9f 83       	std	Y+7, r25	; 0x07
    1c30:	8e 83       	std	Y+6, r24	; 0x06
    1c32:	3f c0       	rjmp	.+126    	; 0x1cb2 <LCD_write_char+0x184>
	else if (__tmp > 65535)
    1c34:	68 85       	ldd	r22, Y+8	; 0x08
    1c36:	79 85       	ldd	r23, Y+9	; 0x09
    1c38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	4c f5       	brge	.+82     	; 0x1c9e <LCD_write_char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c50:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c52:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e2       	ldi	r20, 0x20	; 32
    1c5a:	51 e4       	ldi	r21, 0x41	; 65
    1c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9f 83       	std	Y+7, r25	; 0x07
    1c72:	8e 83       	std	Y+6, r24	; 0x06
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <LCD_write_char+0x166>
    1c76:	88 ec       	ldi	r24, 0xC8	; 200
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9d 83       	std	Y+5, r25	; 0x05
    1c7c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c80:	9d 81       	ldd	r25, Y+5	; 0x05
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_write_char+0x154>
    1c86:	9d 83       	std	Y+5, r25	; 0x05
    1c88:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	9f 83       	std	Y+7, r25	; 0x07
    1c92:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c94:	8e 81       	ldd	r24, Y+6	; 0x06
    1c96:	9f 81       	ldd	r25, Y+7	; 0x07
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	69 f7       	brne	.-38     	; 0x1c76 <LCD_write_char+0x148>
    1c9c:	24 c0       	rjmp	.+72     	; 0x1ce6 <LCD_write_char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9e:	68 85       	ldd	r22, Y+8	; 0x08
    1ca0:	79 85       	ldd	r23, Y+9	; 0x09
    1ca2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ca4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9f 83       	std	Y+7, r25	; 0x07
    1cb0:	8e 83       	std	Y+6, r24	; 0x06
    1cb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb6:	9b 83       	std	Y+3, r25	; 0x03
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <LCD_write_char+0x190>
    1cc2:	9b 83       	std	Y+3, r25	; 0x03
    1cc4:	8a 83       	std	Y+2, r24	; 0x02
    1cc6:	0f c0       	rjmp	.+30     	; 0x1ce6 <LCD_write_char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cc8:	69 89       	ldd	r22, Y+17	; 0x11
    1cca:	7a 89       	ldd	r23, Y+18	; 0x12
    1ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cce:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	88 8b       	std	Y+16, r24	; 0x10
    1cda:	88 89       	ldd	r24, Y+16	; 0x10
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	8a 95       	dec	r24
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <LCD_write_char+0x1b2>
    1ce4:	89 83       	std	Y+1, r24	; 0x01
      LCD_PORT_EN, LCD_PIN_EN,
      Pin_high); /*active enable of LCD to make LCD read the cmnd or data*/

  _delay_us(1); /*delay form En = 0 to En =1  from datasheet page 5*/

  DI_set_pin_value(LCD_PORT_EN, LCD_PIN_EN, Pin_low); /*cancel enable of LCD */
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	65 e0       	ldi	r22, 0x05	; 5
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
  _delay_us(1); /*delay form En = 0 to En =1  from datasheet page 5*/

  DI_set_pin_value(LCD_PORT_EN, LCD_PIN_EN, Pin_low); /*cancel enable of LCD */

#endif
}
    1cf0:	69 96       	adiw	r28, 0x19	; 25
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <LCD_write_string>:

void LCD_write_string(uint_8 *ptr) {
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	61 97       	sbiw	r28, 0x11	; 17
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	99 8b       	std	Y+17, r25	; 0x11
    1d18:	88 8b       	std	Y+16, r24	; 0x10

  uint_8 counter = 0;
    1d1a:	1f 86       	std	Y+15, r1	; 0x0f
  if (ptr != NULL) {
    1d1c:	88 89       	ldd	r24, Y+16	; 0x10
    1d1e:	99 89       	ldd	r25, Y+17	; 0x11
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <LCD_write_string+0x24>
    1d24:	8d c0       	rjmp	.+282    	; 0x1e40 <LCD_write_string+0x13e>
    1d26:	80 c0       	rjmp	.+256    	; 0x1e28 <LCD_write_string+0x126>
    while (ptr[counter] != '\0') {

      LCD_write_char(ptr[counter]);
    1d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	88 89       	ldd	r24, Y+16	; 0x10
    1d30:	99 89       	ldd	r25, Y+17	; 0x11
    1d32:	fc 01       	movw	r30, r24
    1d34:	e2 0f       	add	r30, r18
    1d36:	f3 1f       	adc	r31, r19
    1d38:	80 81       	ld	r24, Z
    1d3a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_write_char>

      counter++;
    1d3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d40:	8f 5f       	subi	r24, 0xFF	; 255
    1d42:	8f 87       	std	Y+15, r24	; 0x0f
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e2       	ldi	r26, 0x20	; 32
    1d4a:	b1 e4       	ldi	r27, 0x41	; 65
    1d4c:	8b 87       	std	Y+11, r24	; 0x0b
    1d4e:	9c 87       	std	Y+12, r25	; 0x0c
    1d50:	ad 87       	std	Y+13, r26	; 0x0d
    1d52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a ef       	ldi	r20, 0xFA	; 250
    1d62:	54 e4       	ldi	r21, 0x44	; 68
    1d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	8f 83       	std	Y+7, r24	; 0x07
    1d6e:	98 87       	std	Y+8, r25	; 0x08
    1d70:	a9 87       	std	Y+9, r26	; 0x09
    1d72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d74:	6f 81       	ldd	r22, Y+7	; 0x07
    1d76:	78 85       	ldd	r23, Y+8	; 0x08
    1d78:	89 85       	ldd	r24, Y+9	; 0x09
    1d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e8       	ldi	r20, 0x80	; 128
    1d82:	5f e3       	ldi	r21, 0x3F	; 63
    1d84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d88:	88 23       	and	r24, r24
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <LCD_write_string+0x94>
		__ticks = 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9e 83       	std	Y+6, r25	; 0x06
    1d92:	8d 83       	std	Y+5, r24	; 0x05
    1d94:	3f c0       	rjmp	.+126    	; 0x1e14 <LCD_write_string+0x112>
	else if (__tmp > 65535)
    1d96:	6f 81       	ldd	r22, Y+7	; 0x07
    1d98:	78 85       	ldd	r23, Y+8	; 0x08
    1d9a:	89 85       	ldd	r24, Y+9	; 0x09
    1d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	3f ef       	ldi	r19, 0xFF	; 255
    1da2:	4f e7       	ldi	r20, 0x7F	; 127
    1da4:	57 e4       	ldi	r21, 0x47	; 71
    1da6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1daa:	18 16       	cp	r1, r24
    1dac:	4c f5       	brge	.+82     	; 0x1e00 <LCD_write_string+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e2       	ldi	r20, 0x20	; 32
    1dbc:	51 e4       	ldi	r21, 0x41	; 65
    1dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	cd 01       	movw	r24, r26
    1dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	0f c0       	rjmp	.+30     	; 0x1df6 <LCD_write_string+0xf4>
    1dd8:	88 ec       	ldi	r24, 0xC8	; 200
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9c 83       	std	Y+4, r25	; 0x04
    1dde:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	9c 81       	ldd	r25, Y+4	; 0x04
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <LCD_write_string+0xe2>
    1de8:	9c 83       	std	Y+4, r25	; 0x04
    1dea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	9e 81       	ldd	r25, Y+6	; 0x06
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	9e 83       	std	Y+6, r25	; 0x06
    1df4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df6:	8d 81       	ldd	r24, Y+5	; 0x05
    1df8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	69 f7       	brne	.-38     	; 0x1dd8 <LCD_write_string+0xd6>
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <LCD_write_string+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e00:	6f 81       	ldd	r22, Y+7	; 0x07
    1e02:	78 85       	ldd	r23, Y+8	; 0x08
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	9e 81       	ldd	r25, Y+6	; 0x06
    1e18:	9a 83       	std	Y+2, r25	; 0x02
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <LCD_write_string+0x11e>
    1e24:	9a 83       	std	Y+2, r25	; 0x02
    1e26:	89 83       	std	Y+1, r24	; 0x01

void LCD_write_string(uint_8 *ptr) {

  uint_8 counter = 0;
  if (ptr != NULL) {
    while (ptr[counter] != '\0') {
    1e28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	88 89       	ldd	r24, Y+16	; 0x10
    1e30:	99 89       	ldd	r25, Y+17	; 0x11
    1e32:	fc 01       	movw	r30, r24
    1e34:	e2 0f       	add	r30, r18
    1e36:	f3 1f       	adc	r31, r19
    1e38:	80 81       	ld	r24, Z
    1e3a:	88 23       	and	r24, r24
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <LCD_write_string+0x13e>
    1e3e:	74 cf       	rjmp	.-280    	; 0x1d28 <LCD_write_string+0x26>

      counter++;
      _delay_ms(10);
    }
  }
}
    1e40:	61 96       	adiw	r28, 0x11	; 17
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <LCD_move_address_counter_of_DDRAM>:

uint_8 LCD_move_address_counter_of_DDRAM(uint_8 line_num, uint_8 location_num) {
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <LCD_move_address_counter_of_DDRAM+0x6>
    1e58:	0f 92       	push	r0
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	8a 83       	std	Y+2, r24	; 0x02
    1e60:	6b 83       	std	Y+3, r22	; 0x03

  uint_8 Error_state = Return_Ok;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	89 83       	std	Y+1, r24	; 0x01
  if ((line_num == LCD_LINE1 || line_num == LCD_LINE2) &&
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	19 f0       	breq	.+6      	; 0x1e72 <LCD_move_address_counter_of_DDRAM+0x20>
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	82 30       	cpi	r24, 0x02	; 2
    1e70:	99 f4       	brne	.+38     	; 0x1e98 <LCD_move_address_counter_of_DDRAM+0x46>
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	88 32       	cpi	r24, 0x28	; 40
    1e76:	80 f4       	brcc	.+32     	; 0x1e98 <LCD_move_address_counter_of_DDRAM+0x46>
      (location_num <= 39)) {

    switch (line_num) {
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	91 05       	cpc	r25, r1
    1e82:	29 f4       	brne	.+10     	; 0x1e8e <LCD_move_address_counter_of_DDRAM+0x3c>

    case LCD_LINE1:
      LCD_send_cmnd(0x80 + location_num);
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	80 58       	subi	r24, 0x80	; 128
    1e88:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <LCD_move_address_counter_of_DDRAM+0x48>
      break;

    default:
      LCD_send_cmnd(0xc0 + location_num);
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	80 54       	subi	r24, 0x40	; 64
    1e92:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <LCD_move_address_counter_of_DDRAM+0x48>
    }
  }

  else {

    Error_state = Return_NOT_Ok;
    1e98:	19 82       	std	Y+1, r1	; 0x01
  }

  return Error_state;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <LCD_write_special_char>:

uint_8 LCD_write_special_char(uint_8 char_num, uint_8 *pattern, uint_8 line_num, uint_8 loaction) {
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	2c 97       	sbiw	r28, 0x0c	; 12
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	8c 83       	std	Y+4, r24	; 0x04
    1ebe:	7e 83       	std	Y+6, r23	; 0x06
    1ec0:	6d 83       	std	Y+5, r22	; 0x05
    1ec2:	4f 83       	std	Y+7, r20	; 0x07
    1ec4:	28 87       	std	Y+8, r18	; 0x08


  uint_8 Error_state = Return_Ok;
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	8b 83       	std	Y+3, r24	; 0x03

  if ((char_num <= 7) && (line_num == 1 || line_num == 2) && (loaction <= 39)) {
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	88 30       	cpi	r24, 0x08	; 8
    1ece:	08 f0       	brcs	.+2      	; 0x1ed2 <LCD_write_special_char+0x2a>
    1ed0:	c1 c0       	rjmp	.+386    	; 0x2054 <LCD_write_special_char+0x1ac>
    1ed2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	21 f0       	breq	.+8      	; 0x1ee0 <LCD_write_special_char+0x38>
    1ed8:	8f 81       	ldd	r24, Y+7	; 0x07
    1eda:	82 30       	cpi	r24, 0x02	; 2
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <LCD_write_special_char+0x38>
    1ede:	ba c0       	rjmp	.+372    	; 0x2054 <LCD_write_special_char+0x1ac>
    1ee0:	88 85       	ldd	r24, Y+8	; 0x08
    1ee2:	88 32       	cpi	r24, 0x28	; 40
    1ee4:	08 f0       	brcs	.+2      	; 0x1ee8 <LCD_write_special_char+0x40>
    1ee6:	b6 c0       	rjmp	.+364    	; 0x2054 <LCD_write_special_char+0x1ac>
    switch (char_num) {
    1ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	3c 87       	std	Y+12, r19	; 0x0c
    1ef0:	2b 87       	std	Y+11, r18	; 0x0b
    1ef2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ef4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ef6:	83 30       	cpi	r24, 0x03	; 3
    1ef8:	91 05       	cpc	r25, r1
    1efa:	81 f1       	breq	.+96     	; 0x1f5c <LCD_write_special_char+0xb4>
    1efc:	2b 85       	ldd	r18, Y+11	; 0x0b
    1efe:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f00:	24 30       	cpi	r18, 0x04	; 4
    1f02:	31 05       	cpc	r19, r1
    1f04:	7c f4       	brge	.+30     	; 0x1f24 <LCD_write_special_char+0x7c>
    1f06:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f08:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	f1 f0       	breq	.+60     	; 0x1f4c <LCD_write_special_char+0xa4>
    1f10:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f12:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f14:	22 30       	cpi	r18, 0x02	; 2
    1f16:	31 05       	cpc	r19, r1
    1f18:	ec f4       	brge	.+58     	; 0x1f54 <LCD_write_special_char+0xac>
    1f1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	89 f0       	breq	.+34     	; 0x1f44 <LCD_write_special_char+0x9c>
    1f22:	2c c0       	rjmp	.+88     	; 0x1f7c <LCD_write_special_char+0xd4>
    1f24:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f26:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f28:	25 30       	cpi	r18, 0x05	; 5
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	f9 f0       	breq	.+62     	; 0x1f6c <LCD_write_special_char+0xc4>
    1f2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f30:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f32:	85 30       	cpi	r24, 0x05	; 5
    1f34:	91 05       	cpc	r25, r1
    1f36:	b4 f0       	brlt	.+44     	; 0x1f64 <LCD_write_special_char+0xbc>
    1f38:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f3a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f3c:	26 30       	cpi	r18, 0x06	; 6
    1f3e:	31 05       	cpc	r19, r1
    1f40:	c9 f0       	breq	.+50     	; 0x1f74 <LCD_write_special_char+0xcc>
    1f42:	1c c0       	rjmp	.+56     	; 0x1f7c <LCD_write_special_char+0xd4>

      /* set address counter in CGRAM*/

    case char0:
      LCD_send_cmnd(0b01000000);
    1f44:	80 e4       	ldi	r24, 0x40	; 64
    1f46:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    1f4a:	1b c0       	rjmp	.+54     	; 0x1f82 <LCD_write_special_char+0xda>
      break;

    case char1:
      LCD_send_cmnd(0b01001000);
    1f4c:	88 e4       	ldi	r24, 0x48	; 72
    1f4e:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    1f52:	17 c0       	rjmp	.+46     	; 0x1f82 <LCD_write_special_char+0xda>
      break;

    case char2:
      LCD_send_cmnd(0b01010000);
    1f54:	80 e5       	ldi	r24, 0x50	; 80
    1f56:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    1f5a:	13 c0       	rjmp	.+38     	; 0x1f82 <LCD_write_special_char+0xda>
      break;
    case char3:
      LCD_send_cmnd(0b01011000);
    1f5c:	88 e5       	ldi	r24, 0x58	; 88
    1f5e:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    1f62:	0f c0       	rjmp	.+30     	; 0x1f82 <LCD_write_special_char+0xda>
      break;

    case char4:
      LCD_send_cmnd(0b01100000);
    1f64:	80 e6       	ldi	r24, 0x60	; 96
    1f66:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    1f6a:	0b c0       	rjmp	.+22     	; 0x1f82 <LCD_write_special_char+0xda>
      break;
    case char5:
      LCD_send_cmnd(0b01101000);
    1f6c:	88 e6       	ldi	r24, 0x68	; 104
    1f6e:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    1f72:	07 c0       	rjmp	.+14     	; 0x1f82 <LCD_write_special_char+0xda>
      break;

    case char6:
      LCD_send_cmnd(0b01110000);
    1f74:	80 e7       	ldi	r24, 0x70	; 112
    1f76:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    1f7a:	03 c0       	rjmp	.+6      	; 0x1f82 <LCD_write_special_char+0xda>
      break;

    default:
      LCD_send_cmnd(0b01111000);
    1f7c:	88 e7       	ldi	r24, 0x78	; 120
    1f7e:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
      break;
    }

    /*wtite special char in CGRAM*/

    for (int i = 0; i < 8; i++) {
    1f82:	1a 82       	std	Y+2, r1	; 0x02
    1f84:	19 82       	std	Y+1, r1	; 0x01
    1f86:	0f c0       	rjmp	.+30     	; 0x1fa6 <LCD_write_special_char+0xfe>
      LCD_write_char(pattern[i]);
    1f88:	29 81       	ldd	r18, Y+1	; 0x01
    1f8a:	3a 81       	ldd	r19, Y+2	; 0x02
    1f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f90:	fc 01       	movw	r30, r24
    1f92:	e2 0f       	add	r30, r18
    1f94:	f3 1f       	adc	r31, r19
    1f96:	80 81       	ld	r24, Z
    1f98:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_write_char>
      break;
    }

    /*wtite special char in CGRAM*/

    for (int i = 0; i < 8; i++) {
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	9a 83       	std	Y+2, r25	; 0x02
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	88 30       	cpi	r24, 0x08	; 8
    1fac:	91 05       	cpc	r25, r1
    1fae:	64 f3       	brlt	.-40     	; 0x1f88 <LCD_write_special_char+0xe0>
      LCD_write_char(pattern[i]);
    }
    /*return address counter to DDRAM*/
    LCD_move_address_counter_of_DDRAM(line_num, loaction);
    1fb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb2:	68 85       	ldd	r22, Y+8	; 0x08
    1fb4:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <LCD_move_address_counter_of_DDRAM>

    switch (char_num) {
    1fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	3a 87       	std	Y+10, r19	; 0x0a
    1fc0:	29 87       	std	Y+9, r18	; 0x09
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc6:	83 30       	cpi	r24, 0x03	; 3
    1fc8:	91 05       	cpc	r25, r1
    1fca:	81 f1       	breq	.+96     	; 0x202c <LCD_write_special_char+0x184>
    1fcc:	29 85       	ldd	r18, Y+9	; 0x09
    1fce:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fd0:	24 30       	cpi	r18, 0x04	; 4
    1fd2:	31 05       	cpc	r19, r1
    1fd4:	7c f4       	brge	.+30     	; 0x1ff4 <LCD_write_special_char+0x14c>
    1fd6:	89 85       	ldd	r24, Y+9	; 0x09
    1fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	91 05       	cpc	r25, r1
    1fde:	f1 f0       	breq	.+60     	; 0x201c <LCD_write_special_char+0x174>
    1fe0:	29 85       	ldd	r18, Y+9	; 0x09
    1fe2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fe4:	22 30       	cpi	r18, 0x02	; 2
    1fe6:	31 05       	cpc	r19, r1
    1fe8:	ec f4       	brge	.+58     	; 0x2024 <LCD_write_special_char+0x17c>
    1fea:	89 85       	ldd	r24, Y+9	; 0x09
    1fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	89 f0       	breq	.+34     	; 0x2014 <LCD_write_special_char+0x16c>
    1ff2:	2c c0       	rjmp	.+88     	; 0x204c <LCD_write_special_char+0x1a4>
    1ff4:	29 85       	ldd	r18, Y+9	; 0x09
    1ff6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ff8:	25 30       	cpi	r18, 0x05	; 5
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	f9 f0       	breq	.+62     	; 0x203c <LCD_write_special_char+0x194>
    1ffe:	89 85       	ldd	r24, Y+9	; 0x09
    2000:	9a 85       	ldd	r25, Y+10	; 0x0a
    2002:	85 30       	cpi	r24, 0x05	; 5
    2004:	91 05       	cpc	r25, r1
    2006:	b4 f0       	brlt	.+44     	; 0x2034 <LCD_write_special_char+0x18c>
    2008:	29 85       	ldd	r18, Y+9	; 0x09
    200a:	3a 85       	ldd	r19, Y+10	; 0x0a
    200c:	26 30       	cpi	r18, 0x06	; 6
    200e:	31 05       	cpc	r19, r1
    2010:	c9 f0       	breq	.+50     	; 0x2044 <LCD_write_special_char+0x19c>
    2012:	1c c0       	rjmp	.+56     	; 0x204c <LCD_write_special_char+0x1a4>

      /* show the required char in CGRAM */

    case char0:
      LCD_write_char(0);
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_write_char>
    201a:	1d c0       	rjmp	.+58     	; 0x2056 <LCD_write_special_char+0x1ae>
      break;

    case char1:
      LCD_write_char(1);
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_write_char>
    2022:	19 c0       	rjmp	.+50     	; 0x2056 <LCD_write_special_char+0x1ae>
      break;

    case char2:
      LCD_write_char(2);
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_write_char>
    202a:	15 c0       	rjmp	.+42     	; 0x2056 <LCD_write_special_char+0x1ae>
      break;

    case char3:
      LCD_write_char(3);
    202c:	83 e0       	ldi	r24, 0x03	; 3
    202e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_write_char>
    2032:	11 c0       	rjmp	.+34     	; 0x2056 <LCD_write_special_char+0x1ae>
      break;

    case char4:
      LCD_write_char(4);
    2034:	84 e0       	ldi	r24, 0x04	; 4
    2036:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_write_char>
    203a:	0d c0       	rjmp	.+26     	; 0x2056 <LCD_write_special_char+0x1ae>
      break;

    case char5:
      LCD_write_char(5);
    203c:	85 e0       	ldi	r24, 0x05	; 5
    203e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_write_char>
    2042:	09 c0       	rjmp	.+18     	; 0x2056 <LCD_write_special_char+0x1ae>
      break;

    case char6:
      LCD_write_char(6);
    2044:	86 e0       	ldi	r24, 0x06	; 6
    2046:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_write_char>
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <LCD_write_special_char+0x1ae>
      break;

    default:
      LCD_write_char(7);
    204c:	87 e0       	ldi	r24, 0x07	; 7
    204e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_write_char>
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <LCD_write_special_char+0x1ae>

  }

  else {

    Error_state = Return_NOT_Ok;
    2054:	1b 82       	std	Y+3, r1	; 0x03
  }

  return Error_state;
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2058:	2c 96       	adiw	r28, 0x0c	; 12
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <KeyPad_Return_key>:
const uint_8 Keypad_shape[4][4] = KPD_FRAM;

/***************************************************************************************************/
/***************************************************************************************************/

uint_8 KeyPad_Return_key(uint_8 *returned_key) {
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	65 97       	sbiw	r28, 0x15	; 21
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	9d 8b       	std	Y+21, r25	; 0x15
    2080:	8c 8b       	std	Y+20, r24	; 0x14

	*returned_key = 0xff;
    2082:	ec 89       	ldd	r30, Y+20	; 0x14
    2084:	fd 89       	ldd	r31, Y+21	; 0x15
    2086:	8f ef       	ldi	r24, 0xFF	; 255
    2088:	80 83       	st	Z, r24
  uint_8 flag = 0;
    208a:	1a 8a       	std	Y+18, r1	; 0x12

  uint_8 Error_state = Return_Ok;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	89 8b       	std	Y+17, r24	; 0x11

  uint_8 Returned_pin_value = 0;
    2090:	1b 8a       	std	Y+19, r1	; 0x13

  //DI_set_port_value(PORTA, 0xff); /******** will set all pins from DIO configer file   *******/

  if (returned_key != NULL) {
    2092:	8c 89       	ldd	r24, Y+20	; 0x14
    2094:	9d 89       	ldd	r25, Y+21	; 0x15
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	09 f4       	brne	.+2      	; 0x209c <KeyPad_Return_key+0x32>
    209a:	ec c0       	rjmp	.+472    	; 0x2274 <KeyPad_Return_key+0x20a>

    for (uint_8 row_num = 0; row_num < 4; row_num++) {
    209c:	18 8a       	std	Y+16, r1	; 0x10
    209e:	e5 c0       	rjmp	.+458    	; 0x226a <KeyPad_Return_key+0x200>

      DI_set_pin_value(KEYPAD_PORT, keypad_row_num[row_num], Pin_low);
    20a0:	88 89       	ldd	r24, Y+16	; 0x10
    20a2:	88 2f       	mov	r24, r24
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	fc 01       	movw	r30, r24
    20a8:	ee 53       	subi	r30, 0x3E	; 62
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	90 81       	ld	r25, Z
    20ae:	83 e0       	ldi	r24, 0x03	; 3
    20b0:	69 2f       	mov	r22, r25
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>
     
      for (uint_8 colum_num = 0; colum_num < 4; colum_num++) {
    20b8:	1f 86       	std	Y+15, r1	; 0x0f
    20ba:	c1 c0       	rjmp	.+386    	; 0x223e <KeyPad_Return_key+0x1d4>

        DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num],&Returned_pin_value);
    20bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	fc 01       	movw	r30, r24
    20c4:	ea 53       	subi	r30, 0x3A	; 58
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	90 81       	ld	r25, Z
    20ca:	9e 01       	movw	r18, r28
    20cc:	2d 5e       	subi	r18, 0xED	; 237
    20ce:	3f 4f       	sbci	r19, 0xFF	; 255
    20d0:	83 e0       	ldi	r24, 0x03	; 3
    20d2:	69 2f       	mov	r22, r25
    20d4:	a9 01       	movw	r20, r18
    20d6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_get_pin_value>
                          
        if (Returned_pin_value == Pin_low) {
    20da:	8b 89       	ldd	r24, Y+19	; 0x13
    20dc:	88 23       	and	r24, r24
    20de:	09 f0       	breq	.+2      	; 0x20e2 <KeyPad_Return_key+0x78>
    20e0:	ab c0       	rjmp	.+342    	; 0x2238 <KeyPad_Return_key+0x1ce>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 ea       	ldi	r26, 0xA0	; 160
    20e8:	b1 e4       	ldi	r27, 0x41	; 65
    20ea:	8b 87       	std	Y+11, r24	; 0x0b
    20ec:	9c 87       	std	Y+12, r25	; 0x0c
    20ee:	ad 87       	std	Y+13, r26	; 0x0d
    20f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a ef       	ldi	r20, 0xFA	; 250
    2100:	54 e4       	ldi	r21, 0x44	; 68
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8f 83       	std	Y+7, r24	; 0x07
    210c:	98 87       	std	Y+8, r25	; 0x08
    210e:	a9 87       	std	Y+9, r26	; 0x09
    2110:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2112:	6f 81       	ldd	r22, Y+7	; 0x07
    2114:	78 85       	ldd	r23, Y+8	; 0x08
    2116:	89 85       	ldd	r24, Y+9	; 0x09
    2118:	9a 85       	ldd	r25, Y+10	; 0x0a
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <KeyPad_Return_key+0xca>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <KeyPad_Return_key+0x148>
	else if (__tmp > 65535)
    2134:	6f 81       	ldd	r22, Y+7	; 0x07
    2136:	78 85       	ldd	r23, Y+8	; 0x08
    2138:	89 85       	ldd	r24, Y+9	; 0x09
    213a:	9a 85       	ldd	r25, Y+10	; 0x0a
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <KeyPad_Return_key+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	6b 85       	ldd	r22, Y+11	; 0x0b
    214e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2150:	8d 85       	ldd	r24, Y+13	; 0x0d
    2152:	9e 85       	ldd	r25, Y+14	; 0x0e
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9e 83       	std	Y+6, r25	; 0x06
    2172:	8d 83       	std	Y+5, r24	; 0x05
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <KeyPad_Return_key+0x12a>
    2176:	88 ec       	ldi	r24, 0xC8	; 200
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9c 83       	std	Y+4, r25	; 0x04
    217c:	8b 83       	std	Y+3, r24	; 0x03
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <KeyPad_Return_key+0x118>
    2186:	9c 83       	std	Y+4, r25	; 0x04
    2188:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	9e 81       	ldd	r25, Y+6	; 0x06
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	9e 81       	ldd	r25, Y+6	; 0x06
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <KeyPad_Return_key+0x10c>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <KeyPad_Return_key+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	6f 81       	ldd	r22, Y+7	; 0x07
    21a0:	78 85       	ldd	r23, Y+8	; 0x08
    21a2:	89 85       	ldd	r24, Y+9	; 0x09
    21a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	9a 83       	std	Y+2, r25	; 0x02
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <KeyPad_Return_key+0x154>
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	89 83       	std	Y+1, r24	; 0x01
           1- read the pins again to update its value
           2-if its value still low that mean you still press on the key
           so we using while loop to update the value of the pin until iys value chang to high
           */

         /*1-*/ DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num],&Returned_pin_value); 
    21c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c8:	88 2f       	mov	r24, r24
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	fc 01       	movw	r30, r24
    21ce:	ea 53       	subi	r30, 0x3A	; 58
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	90 81       	ld	r25, Z
    21d4:	9e 01       	movw	r18, r28
    21d6:	2d 5e       	subi	r18, 0xED	; 237
    21d8:	3f 4f       	sbci	r19, 0xFF	; 255
    21da:	83 e0       	ldi	r24, 0x03	; 3
    21dc:	69 2f       	mov	r22, r25
    21de:	a9 01       	movw	r20, r18
    21e0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_get_pin_value>
    21e4:	0f c0       	rjmp	.+30     	; 0x2204 <KeyPad_Return_key+0x19a>
                            

         /*2-*/ while (Returned_pin_value == Pin_low) /* comment*/
          {

            DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num], &Returned_pin_value); /* comment*/
    21e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e8:	88 2f       	mov	r24, r24
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	fc 01       	movw	r30, r24
    21ee:	ea 53       	subi	r30, 0x3A	; 58
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	90 81       	ld	r25, Z
    21f4:	9e 01       	movw	r18, r28
    21f6:	2d 5e       	subi	r18, 0xED	; 237
    21f8:	3f 4f       	sbci	r19, 0xFF	; 255
    21fa:	83 e0       	ldi	r24, 0x03	; 3
    21fc:	69 2f       	mov	r22, r25
    21fe:	a9 01       	movw	r20, r18
    2200:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_get_pin_value>
           */

         /*1-*/ DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num],&Returned_pin_value); 
                            

         /*2-*/ while (Returned_pin_value == Pin_low) /* comment*/
    2204:	8b 89       	ldd	r24, Y+19	; 0x13
    2206:	88 23       	and	r24, r24
    2208:	71 f3       	breq	.-36     	; 0x21e6 <KeyPad_Return_key+0x17c>

            DIO_get_pin_value(KEYPAD_PORT, keypad_colum_num[colum_num], &Returned_pin_value); /* comment*/
                             
          }

          *returned_key = Keypad_shape[row_num][colum_num];
    220a:	88 89       	ldd	r24, Y+16	; 0x10
    220c:	48 2f       	mov	r20, r24
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	8f 85       	ldd	r24, Y+15	; 0x0f
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	ca 01       	movw	r24, r20
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	82 0f       	add	r24, r18
    2222:	93 1f       	adc	r25, r19
    2224:	fc 01       	movw	r30, r24
    2226:	e6 53       	subi	r30, 0x36	; 54
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	ec 89       	ldd	r30, Y+20	; 0x14
    222e:	fd 89       	ldd	r31, Y+21	; 0x15
    2230:	80 83       	st	Z, r24

          flag = 1;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	8a 8b       	std	Y+18, r24	; 0x12
    2236:	07 c0       	rjmp	.+14     	; 0x2246 <KeyPad_Return_key+0x1dc>

    for (uint_8 row_num = 0; row_num < 4; row_num++) {

      DI_set_pin_value(KEYPAD_PORT, keypad_row_num[row_num], Pin_low);
     
      for (uint_8 colum_num = 0; colum_num < 4; colum_num++) {
    2238:	8f 85       	ldd	r24, Y+15	; 0x0f
    223a:	8f 5f       	subi	r24, 0xFF	; 255
    223c:	8f 87       	std	Y+15, r24	; 0x0f
    223e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2240:	84 30       	cpi	r24, 0x04	; 4
    2242:	08 f4       	brcc	.+2      	; 0x2246 <KeyPad_Return_key+0x1dc>
    2244:	3b cf       	rjmp	.-394    	; 0x20bc <KeyPad_Return_key+0x52>

          break;
        }
      }

      DI_set_pin_value(KEYPAD_PORT, keypad_row_num[row_num], Pin_high);
    2246:	88 89       	ldd	r24, Y+16	; 0x10
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	fc 01       	movw	r30, r24
    224e:	ee 53       	subi	r30, 0x3E	; 62
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	90 81       	ld	r25, Z
    2254:	83 e0       	ldi	r24, 0x03	; 3
    2256:	69 2f       	mov	r22, r25
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>

      if (flag == 1) {
    225e:	8a 89       	ldd	r24, Y+18	; 0x12
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	49 f0       	breq	.+18     	; 0x2276 <KeyPad_Return_key+0x20c>

  //DI_set_port_value(PORTA, 0xff); /******** will set all pins from DIO configer file   *******/

  if (returned_key != NULL) {

    for (uint_8 row_num = 0; row_num < 4; row_num++) {
    2264:	88 89       	ldd	r24, Y+16	; 0x10
    2266:	8f 5f       	subi	r24, 0xFF	; 255
    2268:	88 8b       	std	Y+16, r24	; 0x10
    226a:	88 89       	ldd	r24, Y+16	; 0x10
    226c:	84 30       	cpi	r24, 0x04	; 4
    226e:	08 f4       	brcc	.+2      	; 0x2272 <KeyPad_Return_key+0x208>
    2270:	17 cf       	rjmp	.-466    	; 0x20a0 <KeyPad_Return_key+0x36>
    2272:	01 c0       	rjmp	.+2      	; 0x2276 <KeyPad_Return_key+0x20c>
    }
  }

  else {

    Error_state = Return_NOT_Ok;
    2274:	19 8a       	std	Y+17, r1	; 0x11
  }

  return Error_state;
    2276:	89 89       	ldd	r24, Y+17	; 0x11
}
    2278:	65 96       	adiw	r28, 0x15	; 21
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <main>:
uint_8 counter = 0;
uint_8 passwawrd[4] = {0, 0, 0, 0};
uint_8 log_out = 0;
uint_8 test = 0;

int main() {
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	2e 97       	sbiw	r28, 0x0e	; 14
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61

  DIO_INTI();
    229e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_INTI>

  while (1) {

    LCD_init();
    22a2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <LCD_init>

    LCD_write_string("Enter Passward");
    22a6:	80 e6       	ldi	r24, 0x60	; 96
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_write_string>
    LCD_move_address_counter_of_DDRAM(LCD_LINE2, 0);
    22ae:	82 e0       	ldi	r24, 0x02	; 2
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <LCD_move_address_counter_of_DDRAM>
    22b6:	d3 c0       	rjmp	.+422    	; 0x245e <main+0x1d4>

    while (counter < 4) /*to scan the keypad continousily*/
    {

      KeyPad_Return_key(&key);
    22b8:	8a ed       	ldi	r24, 0xDA	; 218
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0e 94 35 10 	call	0x206a	; 0x206a <KeyPad_Return_key>

      if (key != 0xff) /*to check if you press any key or not*/
    22c0:	80 91 da 00 	lds	r24, 0x00DA
    22c4:	8f 3f       	cpi	r24, 0xFF	; 255
    22c6:	09 f4       	brne	.+2      	; 0x22ca <main+0x40>
    22c8:	c6 c0       	rjmp	.+396    	; 0x2456 <main+0x1cc>
      {
        if (key == CLAER_LCD) {
    22ca:	80 91 da 00 	lds	r24, 0x00DA
    22ce:	84 34       	cpi	r24, 0x44	; 68
    22d0:	31 f4       	brne	.+12     	; 0x22de <main+0x54>

          LCD_send_cmnd(0b00000001);
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
          counter = 0;
    22d8:	10 92 db 00 	sts	0x00DB, r1
    22dc:	c0 c0       	rjmp	.+384    	; 0x245e <main+0x1d4>
          continue;
        }

        // LCD_write_char(key);

        LCD_write_special_char(char2, pattern, LCD_LINE2, counter);
    22de:	90 91 db 00 	lds	r25, 0x00DB
    22e2:	2a eb       	ldi	r18, 0xBA	; 186
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	b9 01       	movw	r22, r18
    22ea:	42 e0       	ldi	r20, 0x02	; 2
    22ec:	29 2f       	mov	r18, r25
    22ee:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <LCD_write_special_char>

        passwawrd[counter] = key;
    22f2:	80 91 db 00 	lds	r24, 0x00DB
    22f6:	88 2f       	mov	r24, r24
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	20 91 da 00 	lds	r18, 0x00DA
    22fe:	fc 01       	movw	r30, r24
    2300:	e4 52       	subi	r30, 0x24	; 36
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	20 83       	st	Z, r18

        counter++;
    2306:	80 91 db 00 	lds	r24, 0x00DB
    230a:	8f 5f       	subi	r24, 0xFF	; 255
    230c:	80 93 db 00 	sts	0x00DB, r24

        if (counter == 4) {
    2310:	80 91 db 00 	lds	r24, 0x00DB
    2314:	84 30       	cpi	r24, 0x04	; 4
    2316:	09 f0       	breq	.+2      	; 0x231a <main+0x90>
    2318:	9e c0       	rjmp	.+316    	; 0x2456 <main+0x1cc>

          if ((passwawrd[0] == '1') && (passwawrd[1] == '2') &&
    231a:	80 91 dc 00 	lds	r24, 0x00DC
    231e:	81 33       	cpi	r24, 0x31	; 49
    2320:	09 f0       	breq	.+2      	; 0x2324 <main+0x9a>
    2322:	99 c0       	rjmp	.+306    	; 0x2456 <main+0x1cc>
    2324:	80 91 dd 00 	lds	r24, 0x00DD
    2328:	82 33       	cpi	r24, 0x32	; 50
    232a:	09 f0       	breq	.+2      	; 0x232e <main+0xa4>
    232c:	94 c0       	rjmp	.+296    	; 0x2456 <main+0x1cc>
    232e:	80 91 de 00 	lds	r24, 0x00DE
    2332:	83 33       	cpi	r24, 0x33	; 51
    2334:	09 f0       	breq	.+2      	; 0x2338 <main+0xae>
    2336:	8f c0       	rjmp	.+286    	; 0x2456 <main+0x1cc>
    2338:	80 91 df 00 	lds	r24, 0x00DF
    233c:	84 33       	cpi	r24, 0x34	; 52
    233e:	09 f0       	breq	.+2      	; 0x2342 <main+0xb8>
    2340:	8a c0       	rjmp	.+276    	; 0x2456 <main+0x1cc>
              (passwawrd[2] == '3') && (passwawrd[3] == '4')) {

            //   DI_set_pin_value(PORTB, PIN0, Pin_high);

            LCD_move_address_counter_of_DDRAM(LCD_LINE1, 0);
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <LCD_move_address_counter_of_DDRAM>

            LCD_send_cmnd(0b00000001);
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>

            LCD_write_string("welcome To Motor");
    2350:	8f e6       	ldi	r24, 0x6F	; 111
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_write_string>

            LCD_move_address_counter_of_DDRAM(LCD_LINE2, 0);
    2358:	82 e0       	ldi	r24, 0x02	; 2
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <LCD_move_address_counter_of_DDRAM>

            LCD_write_string("Desh Board");
    2360:	80 e8       	ldi	r24, 0x80	; 128
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_write_string>

            test = test + 1;
    2368:	80 91 e1 00 	lds	r24, 0x00E1
    236c:	8f 5f       	subi	r24, 0xFF	; 255
    236e:	80 93 e1 00 	sts	0x00E1, r24
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	a8 ec       	ldi	r26, 0xC8	; 200
    2378:	b2 e4       	ldi	r27, 0x42	; 66
    237a:	8b 87       	std	Y+11, r24	; 0x0b
    237c:	9c 87       	std	Y+12, r25	; 0x0c
    237e:	ad 87       	std	Y+13, r26	; 0x0d
    2380:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2382:	6b 85       	ldd	r22, Y+11	; 0x0b
    2384:	7c 85       	ldd	r23, Y+12	; 0x0c
    2386:	8d 85       	ldd	r24, Y+13	; 0x0d
    2388:	9e 85       	ldd	r25, Y+14	; 0x0e
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	4a ef       	ldi	r20, 0xFA	; 250
    2390:	54 e4       	ldi	r21, 0x44	; 68
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	8f 83       	std	Y+7, r24	; 0x07
    239c:	98 87       	std	Y+8, r25	; 0x08
    239e:	a9 87       	std	Y+9, r26	; 0x09
    23a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a2:	6f 81       	ldd	r22, Y+7	; 0x07
    23a4:	78 85       	ldd	r23, Y+8	; 0x08
    23a6:	89 85       	ldd	r24, Y+9	; 0x09
    23a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e8       	ldi	r20, 0x80	; 128
    23b0:	5f e3       	ldi	r21, 0x3F	; 63
    23b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b6:	88 23       	and	r24, r24
    23b8:	2c f4       	brge	.+10     	; 0x23c4 <main+0x13a>
		__ticks = 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
    23c2:	3f c0       	rjmp	.+126    	; 0x2442 <main+0x1b8>
	else if (__tmp > 65535)
    23c4:	6f 81       	ldd	r22, Y+7	; 0x07
    23c6:	78 85       	ldd	r23, Y+8	; 0x08
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	3f ef       	ldi	r19, 0xFF	; 255
    23d0:	4f e7       	ldi	r20, 0x7F	; 127
    23d2:	57 e4       	ldi	r21, 0x47	; 71
    23d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23d8:	18 16       	cp	r1, r24
    23da:	4c f5       	brge	.+82     	; 0x242e <main+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23de:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e2       	ldi	r20, 0x20	; 32
    23ea:	51 e4       	ldi	r21, 0x41	; 65
    23ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	9e 83       	std	Y+6, r25	; 0x06
    2402:	8d 83       	std	Y+5, r24	; 0x05
    2404:	0f c0       	rjmp	.+30     	; 0x2424 <main+0x19a>
    2406:	88 ec       	ldi	r24, 0xC8	; 200
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9c 83       	std	Y+4, r25	; 0x04
    240c:	8b 83       	std	Y+3, r24	; 0x03
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <main+0x188>
    2416:	9c 83       	std	Y+4, r25	; 0x04
    2418:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241a:	8d 81       	ldd	r24, Y+5	; 0x05
    241c:	9e 81       	ldd	r25, Y+6	; 0x06
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	9e 81       	ldd	r25, Y+6	; 0x06
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	69 f7       	brne	.-38     	; 0x2406 <main+0x17c>
    242c:	14 c0       	rjmp	.+40     	; 0x2456 <main+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9e 83       	std	Y+6, r25	; 0x06
    2440:	8d 83       	std	Y+5, r24	; 0x05
    2442:	8d 81       	ldd	r24, Y+5	; 0x05
    2444:	9e 81       	ldd	r25, Y+6	; 0x06
    2446:	9a 83       	std	Y+2, r25	; 0x02
    2448:	89 83       	std	Y+1, r24	; 0x01
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <main+0x1c4>
    2452:	9a 83       	std	Y+2, r25	; 0x02
    2454:	89 83       	std	Y+1, r24	; 0x01
          }

        }
      }

      if (test != 0) {
    2456:	80 91 e1 00 	lds	r24, 0x00E1
    245a:	88 23       	and	r24, r24
    245c:	29 f4       	brne	.+10     	; 0x2468 <main+0x1de>
    LCD_init();

    LCD_write_string("Enter Passward");
    LCD_move_address_counter_of_DDRAM(LCD_LINE2, 0);

    while (counter < 4) /*to scan the keypad continousily*/
    245e:	80 91 db 00 	lds	r24, 0x00DB
    2462:	84 30       	cpi	r24, 0x04	; 4
    2464:	08 f4       	brcc	.+2      	; 0x2468 <main+0x1de>
    2466:	28 cf       	rjmp	.-432    	; 0x22b8 <main+0x2e>
      if (test != 0) {
        break;
      }
    }

    if (test != 0) {
    2468:	80 91 e1 00 	lds	r24, 0x00E1
    246c:	88 23       	and	r24, r24
    246e:	89 f5       	brne	.+98     	; 0x24d2 <main+0x248>
      break;
    }

    log_out++;
    2470:	80 91 e0 00 	lds	r24, 0x00E0
    2474:	8f 5f       	subi	r24, 0xFF	; 255
    2476:	80 93 e0 00 	sts	0x00E0, r24

    if (log_out == 3) {
    247a:	80 91 e0 00 	lds	r24, 0x00E0
    247e:	83 30       	cpi	r24, 0x03	; 3
    2480:	a1 f4       	brne	.+40     	; 0x24aa <main+0x220>
      DI_set_pin_value(PORTB, PIN1, Pin_high);
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	41 e0       	ldi	r20, 0x01	; 1
    2488:	0e 94 6b 07 	call	0xed6	; 0xed6 <DI_set_pin_value>

      LCD_send_cmnd(0b00000001);
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
      LCD_write_string("wrong Passward");
    2492:	8b e8       	ldi	r24, 0x8B	; 139
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_write_string>

      LCD_send_cmnd(0b00000001);
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
      LCD_write_string("access failed");
    24a0:	8a e9       	ldi	r24, 0x9A	; 154
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_write_string>
    24a8:	14 c0       	rjmp	.+40     	; 0x24d2 <main+0x248>

      break;
    }

    counter = 0;
    24aa:	10 92 db 00 	sts	0x00DB, r1

    LCD_send_cmnd(0b00000001);
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>

    LCD_write_string("wrong Passward");
    24b4:	8b e8       	ldi	r24, 0x8B	; 139
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_write_string>
    LCD_send_cmnd(0b00000001);
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    LCD_write_string("try again");
    24c2:	88 ea       	ldi	r24, 0xA8	; 168
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_write_string>
    LCD_send_cmnd(0b00000001);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	0e 94 ad 0c 	call	0x195a	; 0x195a <LCD_send_cmnd>
    24d0:	e8 ce       	rjmp	.-560    	; 0x22a2 <main+0x18>
  }

  return 0;
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	90 e0       	ldi	r25, 0x00	; 0
}
    24d6:	2e 96       	adiw	r28, 0x0e	; 14
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <__prologue_saves__>:
    24e8:	2f 92       	push	r2
    24ea:	3f 92       	push	r3
    24ec:	4f 92       	push	r4
    24ee:	5f 92       	push	r5
    24f0:	6f 92       	push	r6
    24f2:	7f 92       	push	r7
    24f4:	8f 92       	push	r8
    24f6:	9f 92       	push	r9
    24f8:	af 92       	push	r10
    24fa:	bf 92       	push	r11
    24fc:	cf 92       	push	r12
    24fe:	df 92       	push	r13
    2500:	ef 92       	push	r14
    2502:	ff 92       	push	r15
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	ca 1b       	sub	r28, r26
    2512:	db 0b       	sbc	r29, r27
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	09 94       	ijmp

00002520 <__epilogue_restores__>:
    2520:	2a 88       	ldd	r2, Y+18	; 0x12
    2522:	39 88       	ldd	r3, Y+17	; 0x11
    2524:	48 88       	ldd	r4, Y+16	; 0x10
    2526:	5f 84       	ldd	r5, Y+15	; 0x0f
    2528:	6e 84       	ldd	r6, Y+14	; 0x0e
    252a:	7d 84       	ldd	r7, Y+13	; 0x0d
    252c:	8c 84       	ldd	r8, Y+12	; 0x0c
    252e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2530:	aa 84       	ldd	r10, Y+10	; 0x0a
    2532:	b9 84       	ldd	r11, Y+9	; 0x09
    2534:	c8 84       	ldd	r12, Y+8	; 0x08
    2536:	df 80       	ldd	r13, Y+7	; 0x07
    2538:	ee 80       	ldd	r14, Y+6	; 0x06
    253a:	fd 80       	ldd	r15, Y+5	; 0x05
    253c:	0c 81       	ldd	r16, Y+4	; 0x04
    253e:	1b 81       	ldd	r17, Y+3	; 0x03
    2540:	aa 81       	ldd	r26, Y+2	; 0x02
    2542:	b9 81       	ldd	r27, Y+1	; 0x01
    2544:	ce 0f       	add	r28, r30
    2546:	d1 1d       	adc	r29, r1
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	ed 01       	movw	r28, r26
    2554:	08 95       	ret

00002556 <_exit>:
    2556:	f8 94       	cli

00002558 <__stop_program>:
    2558:	ff cf       	rjmp	.-2      	; 0x2558 <__stop_program>
